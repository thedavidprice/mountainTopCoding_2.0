import { Platform } from '@prisma/get-platform';
import type { Engine, EngineConfig, EngineEventType } from './Engine';
import { ConfigMetaFormat, QueryEngineLogLevel } from './napi-types';
export declare class NAPIEngine implements Engine {
    private engine?;
    private setupPromise?;
    private connectPromise?;
    private disconnectPromise?;
    private currentQuery?;
    private config;
    private QueryEngine?;
    private library?;
    private logEmitter;
    libQueryEnginePath?: string;
    platform?: Platform;
    datasourceOverrides: Record<string, string>;
    datamodel: string;
    logQueries: boolean;
    logLevel: QueryEngineLogLevel;
    lastQuery?: string;
    lastError?: any;
    connected: boolean;
    beforeExitListener?: (args?: any) => any;
    versionInfo?: {
        commit: string;
        version: string;
    };
    constructor(config: EngineConfig);
    private internalSetup;
    private getPlatform;
    private parseEngineResponse;
    private convertDatasources;
    private loadEngine;
    private logger;
    private getErrorMessageWithLink;
    private parseInitError;
    private parseRequestError;
    on(event: EngineEventType, listener: (args?: any) => any): void;
    emitExit(): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    kill(signal: string): void;
    getConfig(): Promise<ConfigMetaFormat>;
    version(forceRun?: boolean): string;
    private graphQLToJSError;
    request<T>(query: string, headers: Record<string, string>, numTry: number): Promise<{
        data: T;
        elapsed: number;
    }>;
    requestBatch(queries: string[], transaction?: boolean, numTry?: number): Promise<any>;
    private resolveEnginePath;
    private getLibQueryEnginePath;
    private getFixedGenerator;
}
