"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execaCommand = exports.dropDatabase = exports.createDatabase = exports.canConnectToDatabase = void 0;
const fetch_engine_1 = require("@prisma/fetch-engine");
const execa_1 = __importDefault(require("execa"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const getSchema_1 = require("./cli/getSchema");
const convertCredentials_1 = require("./convertCredentials");
const resolveBinary_1 = require("./resolveBinary");
const exists = util_1.promisify(fs_1.default.exists);
async function canConnectToDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    const provider = convertCredentials_1.databaseTypeToConnectorType(convertCredentials_1.protocolToDatabaseType(`${connectionString.split(':')[0]}:`));
    if (provider === 'sqlite') {
        const sqliteExists = await doesSqliteDbExist(connectionString, cwd);
        if (sqliteExists) {
            return true;
        }
        else {
            return {
                code: 'P1003',
                message: "SQLite database file doesn't exist",
            };
        }
    }
    try {
        await execaCommand({
            connectionString,
            cwd,
            migrationEnginePath,
            engineCommandName: 'can-connect-to-database',
        });
    }
    catch (e) {
        if (e.stdout) {
            let json;
            try {
                json = JSON.parse(e.stdout.trim());
            }
            catch (e) {
                throw new Error(`Can't parse migration engine response:\n${e.stdout}`);
            }
            return {
                code: json.error_code,
                message: json.message,
                meta: json.meta,
            };
        }
        if (e.stderr) {
            throw new Error(`Migration engine error:\n${e.stderr}`);
        }
        else {
            throw new Error("Can't create database");
        }
    }
    return true;
}
exports.canConnectToDatabase = canConnectToDatabase;
async function createDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    const dbExists = await canConnectToDatabase(connectionString, cwd, migrationEnginePath);
    if (dbExists === true) {
        return false;
    }
    try {
        await execaCommand({
            connectionString,
            cwd,
            migrationEnginePath,
            engineCommandName: 'create-database',
        });
        return true;
    }
    catch (e) {
        if (e.stdout) {
            let error;
            try {
                error = JSON.parse(e.stdout.trim());
            }
            catch (e) { }
            if (error === null || error === void 0 ? void 0 : error.message) {
                throw new Error(error.message);
            }
        }
        if (e.stderr) {
            throw new Error(`Migration engine error:\n${e.stderr}`);
        }
        else {
            throw new Error(`Migration engine exited.`);
        }
    }
}
exports.createDatabase = createDatabase;
async function dropDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    try {
        const result = await execaCommand({
            connectionString,
            cwd,
            migrationEnginePath,
            engineCommandName: 'drop-database',
        });
        if (result &&
            result.exitCode === 0 &&
            result.stderr.includes('The database was successfully dropped')) {
            return true;
        }
        else {
            // We should not arrive here normally
            throw Error(`An error occurred during the drop: ${JSON.stringify(result, undefined, 2)}`);
        }
    }
    catch (e) {
        let json;
        try {
            json = JSON.parse(e.stdout);
        }
        catch (e) {
            console.error(`Could not parse database drop engine response: ${e.stdout.slice(0, 200)}`);
        }
        if (json.message) {
            throw Error(json.message);
        }
        throw Error(e);
    }
}
exports.dropDatabase = dropDatabase;
async function execaCommand({ connectionString, cwd, migrationEnginePath, engineCommandName, }) {
    migrationEnginePath =
        migrationEnginePath || (await resolveBinary_1.resolveBinary(fetch_engine_1.EngineTypes.migrationEngine));
    try {
        return await execa_1.default(migrationEnginePath, ['cli', '--datasource', connectionString, engineCommandName], {
            cwd,
            env: {
                RUST_BACKTRACE: '1',
                RUST_LOG: 'info',
            },
        });
    }
    catch (e) {
        if (e.message) {
            e.message = e.message.replace(connectionString, '<REDACTED>');
        }
        if (e.stdout) {
            e.stdout = e.stdout.replace(connectionString, '<REDACTED>');
        }
        if (e.stderr) {
            e.stderr = e.stderr.replace(connectionString, '<REDACTED>');
        }
        throw e;
    }
}
exports.execaCommand = execaCommand;
async function doesSqliteDbExist(connectionString, schemaDir) {
    let filePath = connectionString;
    if (filePath.startsWith('file:')) {
        filePath = filePath.slice(5);
    }
    else if (filePath.startsWith('sqlite:')) {
        filePath = filePath.slice(7);
    }
    const cwd = schemaDir || (await getSchema_1.getSchemaDir());
    if (!cwd) {
        throw new Error(`Could not find schema.prisma in ${process.cwd()}`);
    }
    const absoluteTarget = path_1.default.resolve(cwd, filePath);
    return exists(absoluteTarget);
}
//# sourceMappingURL=migrateEngineCommands.js.map