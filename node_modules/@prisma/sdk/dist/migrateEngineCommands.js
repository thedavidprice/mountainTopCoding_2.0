"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doesSqliteDbExist = exports.execaCommand = exports.dropDatabase = exports.createDatabase = exports.canConnectToDatabase = exports.MigrateEngineExitCode = void 0;
const fetch_engine_1 = require("@prisma/fetch-engine");
const execa_1 = __importDefault(require("execa"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const getSchema_1 = require("./cli/getSchema");
const convertCredentials_1 = require("./convertCredentials");
const resolveBinary_1 = require("./resolveBinary");
const exists = util_1.promisify(fs_1.default.exists);
// ### Exit codes
// `0`: normal exit
// `1`: abnormal (error) exit
// `101`: panic
// Non-zero exit codes should always be accompanied by a log message on stderr with the `ERROR` level.
var MigrateEngineExitCode;
(function (MigrateEngineExitCode) {
    MigrateEngineExitCode[MigrateEngineExitCode["Success"] = 0] = "Success";
    MigrateEngineExitCode[MigrateEngineExitCode["Error"] = 1] = "Error";
    MigrateEngineExitCode[MigrateEngineExitCode["Panic"] = 101] = "Panic";
})(MigrateEngineExitCode = exports.MigrateEngineExitCode || (exports.MigrateEngineExitCode = {}));
function parseJsonFromStderr(stderr) {
    // split by new line
    const lines = stderr.split(/\r?\n/).slice(1); // Remove first element
    const logs = [];
    for (const line of lines) {
        const data = String(line);
        try {
            const json = JSON.parse(data);
            logs.push(json);
        }
        catch (e) {
            throw new Error(`Could not parse migration engine response: ${e}`);
        }
    }
    return logs;
}
async function canConnectToDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    if (!connectionString) {
        throw new Error('Connection url is empty. See https://www.prisma.io/docs/reference/database-reference/connection-urls');
    }
    const provider = convertCredentials_1.databaseTypeToConnectorType(convertCredentials_1.protocolToDatabaseType(`${connectionString.split(':')[0]}:`));
    if (provider === 'sqlite') {
        const sqliteExists = await doesSqliteDbExist(connectionString, cwd);
        if (sqliteExists) {
            return true;
        }
        else {
            return {
                code: 'P1003',
                message: "SQLite database file doesn't exist",
            };
        }
    }
    try {
        await execaCommand({
            connectionString,
            cwd,
            migrationEnginePath,
            engineCommandName: 'can-connect-to-database',
        });
    }
    catch (e) {
        if (e.stderr) {
            const logs = parseJsonFromStderr(e.stderr);
            const error = logs.find((it) => it.level === 'ERROR');
            if (error && error.fields.error_code && error.fields.message) {
                return {
                    code: error.fields.error_code,
                    message: error.fields.message,
                };
            }
            else {
                throw new Error(`Migration engine error:\n${logs
                    .map((log) => log.fields.message)
                    .join('\n')}`);
            }
        }
        else {
            throw new Error(`Migration engine exited.`);
        }
    }
    return true;
}
exports.canConnectToDatabase = canConnectToDatabase;
async function createDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    const dbExists = await canConnectToDatabase(connectionString, cwd, migrationEnginePath);
    // If database is already created, stop here, don't create it
    if (dbExists === true) {
        return false;
    }
    try {
        await execaCommand({
            connectionString,
            cwd,
            migrationEnginePath,
            engineCommandName: 'create-database',
        });
        return true;
    }
    catch (e) {
        if (e.stderr) {
            const logs = parseJsonFromStderr(e.stderr);
            const error = logs.find((it) => it.level === 'ERROR');
            if (error && error.fields.error_code && error.fields.message) {
                throw new Error(`${error.fields.error_code}: ${error.fields.message}`);
            }
            else {
                throw new Error(`Migration engine error:\n${logs
                    .map((log) => log.fields.message)
                    .join('\n')}`);
            }
        }
        else {
            throw new Error(`Migration engine exited.`);
        }
    }
}
exports.createDatabase = createDatabase;
async function dropDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    try {
        const result = await execaCommand({
            connectionString,
            cwd,
            migrationEnginePath,
            engineCommandName: 'drop-database',
        });
        if (result &&
            result.exitCode === 0 &&
            result.stderr.includes('The database was successfully dropped')) {
            return true;
        }
        else {
            // We should not arrive here normally
            throw Error(`An error occurred during the drop: ${JSON.stringify(result, undefined, 2)}`);
        }
    }
    catch (e) {
        if (e.stderr) {
            const logs = parseJsonFromStderr(e.stderr);
            throw new Error(`Migration engine error:\n${logs
                .map((log) => log.fields.message)
                .join('\n')}`);
        }
        else {
            throw new Error(`Migration engine exited.`);
        }
    }
}
exports.dropDatabase = dropDatabase;
async function execaCommand({ connectionString, cwd, migrationEnginePath, engineCommandName, }) {
    migrationEnginePath =
        migrationEnginePath || (await resolveBinary_1.resolveBinary(fetch_engine_1.BinaryType.migrationEngine));
    try {
        return await execa_1.default(migrationEnginePath, ['cli', '--datasource', connectionString, engineCommandName], {
            cwd,
            env: {
                RUST_BACKTRACE: '1',
                RUST_LOG: 'info',
            },
        });
    }
    catch (e) {
        if (e.message) {
            e.message = e.message.replace(connectionString, '<REDACTED>');
        }
        if (e.stdout) {
            e.stdout = e.stdout.replace(connectionString, '<REDACTED>');
        }
        if (e.stderr) {
            e.stderr = e.stderr.replace(connectionString, '<REDACTED>');
        }
        throw e;
    }
}
exports.execaCommand = execaCommand;
async function doesSqliteDbExist(connectionString, schemaDir) {
    let filePath = connectionString;
    if (filePath.startsWith('file:')) {
        filePath = filePath.slice(5);
    }
    else if (filePath.startsWith('sqlite:')) {
        filePath = filePath.slice(7);
    }
    const cwd = schemaDir || (await getSchema_1.getSchemaDir());
    if (!cwd) {
        throw new Error(`Could not find schema.prisma in ${process.cwd()}`);
    }
    const absoluteTarget = path_1.default.resolve(cwd, filePath);
    return exists(absoluteTarget);
}
exports.doesSqliteDbExist = doesSqliteDbExist;
//# sourceMappingURL=migrateEngineCommands.js.map