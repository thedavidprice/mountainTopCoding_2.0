{"version":3,"file":"index.umd.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/compact.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/utils/deepMerge.ts","../src/logic/getFieldsValues.ts","../src/utils/deepEqual.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/cloneObject.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/fillBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/isErrorStateChanged.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from '../utils/isObject';\n\nexport default function deepEqual(\n  object1: any = [],\n  object2: any = [],\n  isErrorObject?: boolean,\n) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(object: T): T {\n  let copy: any;\n\n  if (isPrimitive(object)) {\n    return object;\n  }\n\n  if (object instanceof Date) {\n    copy = new Date(object.getTime());\n    return copy;\n  }\n\n  copy = Array.isArray(object) ? [] : {};\n\n  for (const key in object) {\n    copy[key] = cloneObject(object[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : cloneObject(defaultValues),\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = () =>\n    !deepEqual(\n      getValues(),\n      isEmptyObject(defaultValuesRef.current)\n        ? defaultValuesAtRenderRef.current\n        : defaultValuesRef.current,\n    );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty =\n          get(defaultValuesAtRenderRef.current, name) !==\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = get(errors, name);\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = (name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n  };\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          resolverRef.current && validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? isKey(inputName)\n            ? delete formStateRef.current.errors[inputName]\n            : set(formStateRef.current.errors, inputName, undefined)\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(fieldErrors, e));\n          shouldFocusError && focusOnErrorField(fieldsRef.current, fieldErrors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(values || defaultValuesRef.current);\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    updateWatchedValue,\n    shouldUnregister,\n    removeFieldEventListener,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return compact(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : Array.isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[])\n    .map(mapValueToBoolean)\n    .flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './utils/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends { [k: string]: unknown }[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    const defaultFieldArrayValues = get(defaultValuesRef.current, name, []);\n    const updateDirtyFieldsBaseOnDefaultValues = <U extends T>(\n      base: U,\n      target: U,\n    ) => {\n      for (const key in base) {\n        for (const innerKey in base[key]) {\n          if (\n            innerKey !== keyName &&\n            (!target[key] ||\n              !base[key] ||\n              base[key][innerKey] !== target[key][innerKey])\n          ) {\n            set(formStateRef.current.dirtyFields, `${name}[${key}]`, {\n              ...get(formStateRef.current.dirtyFields, `${name}[${key}]`, {}),\n              [innerKey]: true,\n            });\n          }\n        }\n      }\n    };\n\n    if (updatedFieldArrayValues) {\n      updateDirtyFieldsBaseOnDefaultValues(\n        defaultFieldArrayValues,\n        updatedFieldArrayValues,\n      );\n      updateDirtyFieldsBaseOnDefaultValues(\n        updatedFieldArrayValues,\n        defaultFieldArrayValues,\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends { [k: string]: unknown }[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    isDirty = true,\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty,\n      touched: formStateRef.current.touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...allFields.current,\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    if (!shouldUnregister) {\n      shallowFieldsStateRef.current[name] = [\n        ...(shallowFieldsStateRef.current[name] || []),\n        value,\n      ];\n    }\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: { [k: string]: unknown }[] = removeArrayAt(\n      fieldValues,\n      index,\n    );\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      getIsDirtyState(removeArrayAt(fieldValues, index)),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      getIsDirtyState(insertAt(fieldValues, index)),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      getIsDirtyState(fieldValues),\n      false,\n    );\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(() => () => unregister(name), [unregister, name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : Array.isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value)\n        ? { ...value }\n        : Array.isArray(value)\n        ? [...value]\n        : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","isObjectType","isNullOrUndefined","Array","isArray","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","reduce","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","Object","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","[object Object]","deepMerge","target","source","isPrimitive","targetValue","sourceValue","search","output","isString","startsWith","find","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","RegExp","validationData","isValueMessage","isRegex","message","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","error","types","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","entries","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","cloneObject","copy","getTime","mode","isOnSubmit","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","mapIds","keyName","generateId","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","updateWatchedValue","resetFieldArrayFunctionRef","removeFieldEventListener","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","getValues","shouldUnregister","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","allFields","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","_b","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","defaultFieldArrayValues","updateDirtyFieldsBaseOnDefaultValues","base","innerKey","batchStateUpdate","method","args","updatedFieldValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","reset","pop","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","fillBooleanArray","append","updateFormValues","remove","removeArrayAt","insertAt","resolver","context","shouldFocusError","criteriaMode","watchFieldsRef","Set","useWatchFieldsRef","useWatchRenderFunctionsRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","submitCount","isSubmitting","isSubmitSuccessful","observerRef","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","shouldRenderUseWatch","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}