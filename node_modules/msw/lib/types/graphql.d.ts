import { OperationTypeNode } from 'graphql';
import { RequestHandler, MockedRequest, AsyncResponseResolverReturnType } from './utils/handlers/requestHandler';
import { MockedResponse, ResponseComposition } from './response';
import { Mask } from './setupWorker/glossary';
import { set } from './context/set';
import { status } from './context/status';
import { delay } from './context/delay';
import { fetch } from './context/fetch';
import { DataContext } from './context/data';
import { errors } from './context/errors';
declare type GraphQLRequestHandlerSelector = RegExp | string;
export declare type GraphQLMockedRequest<VariablesType = Record<string, any>> = Omit<MockedRequest, 'body'> & {
    body: (GraphQLRequestPayload<VariablesType> & Record<string, any>) | undefined;
    variables: VariablesType;
};
export interface GraphQLMockedContext<QueryType> {
    set: typeof set;
    status: typeof status;
    delay: typeof delay;
    fetch: typeof fetch;
    data: DataContext<QueryType>;
    errors: typeof errors;
}
export declare const graphqlContext: GraphQLMockedContext<any>;
export declare type GraphQLResponseResolver<QueryType, VariablesType> = (req: GraphQLMockedRequest<VariablesType>, res: ResponseComposition, context: GraphQLMockedContext<QueryType>) => AsyncResponseResolverReturnType<MockedResponse>;
export interface GraphQLRequestPayload<VariablesType> {
    query: string;
    variables?: VariablesType;
}
export interface GraphQLRequestParsedResult<VariablesType> {
    operationType: OperationTypeNode;
    operationName: string | undefined;
    variables: VariablesType | undefined;
}
declare const graphqlStandardHandlers: {
    operation: <QueryType, VariablesType = Record<string, any>>(resolver: GraphQLResponseResolver<QueryType, VariablesType>) => RequestHandler<GraphQLMockedRequest<VariablesType>, GraphQLMockedContext<QueryType>, GraphQLRequestParsedResult<VariablesType>, GraphQLMockedRequest<VariablesType>, any>;
    query: <QueryType_1, VariablesType_1 = Record<string, any>>(expectedOperationName: GraphQLRequestHandlerSelector, resolver: GraphQLResponseResolver<QueryType_1, VariablesType_1>) => RequestHandler<GraphQLMockedRequest<VariablesType_1>, GraphQLMockedContext<QueryType_1>, GraphQLRequestParsedResult<VariablesType_1>, GraphQLMockedRequest<VariablesType_1>, any>;
    mutation: <QueryType_1, VariablesType_1 = Record<string, any>>(expectedOperationName: GraphQLRequestHandlerSelector, resolver: GraphQLResponseResolver<QueryType_1, VariablesType_1>) => RequestHandler<GraphQLMockedRequest<VariablesType_1>, GraphQLMockedContext<QueryType_1>, GraphQLRequestParsedResult<VariablesType_1>, GraphQLMockedRequest<VariablesType_1>, any>;
};
declare function createGraphQLLink(uri: Mask): typeof graphqlStandardHandlers;
export declare const graphql: {
    link: typeof createGraphQLLink;
    operation: <QueryType, VariablesType = Record<string, any>>(resolver: GraphQLResponseResolver<QueryType, VariablesType>) => RequestHandler<GraphQLMockedRequest<VariablesType>, GraphQLMockedContext<QueryType>, GraphQLRequestParsedResult<VariablesType>, GraphQLMockedRequest<VariablesType>, any>;
    query: <QueryType_1, VariablesType_1 = Record<string, any>>(expectedOperationName: GraphQLRequestHandlerSelector, resolver: GraphQLResponseResolver<QueryType_1, VariablesType_1>) => RequestHandler<GraphQLMockedRequest<VariablesType_1>, GraphQLMockedContext<QueryType_1>, GraphQLRequestParsedResult<VariablesType_1>, GraphQLMockedRequest<VariablesType_1>, any>;
    mutation: <QueryType_1, VariablesType_1 = Record<string, any>>(expectedOperationName: GraphQLRequestHandlerSelector, resolver: GraphQLResponseResolver<QueryType_1, VariablesType_1>) => RequestHandler<GraphQLMockedRequest<VariablesType_1>, GraphQLMockedContext<QueryType_1>, GraphQLRequestParsedResult<VariablesType_1>, GraphQLMockedRequest<VariablesType_1>, any>;
};
export {};
