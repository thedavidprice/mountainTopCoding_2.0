{"version":3,"sources":["../src/index.js"],"names":["debug","cloneDeep","isIdentifier","isMemberExpression","isImportSpecifier","isImportDefaultSpecifier","variableDeclaration","variableDeclarator","memberExpression","callExpression","identifier","isObjectPattern","types","uniqueFn","api","options","assertVersion","importSources","gqlTagIdentifiers","onlyMatchImportSuffix","strip","gqlTagIdentifiersSet","Set","compile","path","uniqueId","source","node","quasis","reduce","head","quasi","value","raw","expressions","get","forEach","expr","buildCodeFrameError","finalSource","queryDocument","definitions","length","definition","name","Error","transform","body","uniqueUsed","definitionsProperty","properties","find","property","key","definitionsArray","extraDefinitions","map","allDefinitions","visitor","Program","programPath","tagNames","pendingDeletion","scope","generateUidIdentifier","hasError","traverse","CallExpression","enter","nodePath","callee","arguments","args","equals","pathValue","some","endsWith","parentPath","isVariableDeclarator","gqlDeclaration","parent","declarations","id","gqlProperty","has","push","defaultSpecifier","filter","ImportDeclaration","gqlSpecifier","specifiers","specifier","local","TaggedTemplateExpression","tag","used","replaceWith","error","console","pathForDeletion","remove","unshiftContainer"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AATA;AAWA,MAAMA,KAAK,GAAG,oBAAY,0BAAZ,CAAd;AACA,MAAM;AACJC,EAAAA,SADI;AAEJC,EAAAA,YAFI;AAGJC,EAAAA,kBAHI;AAIJC,EAAAA,iBAJI;AAKJC,EAAAA,wBALI;AAMJC,EAAAA,mBANI;AAOJC,EAAAA,kBAPI;AAQJC,EAAAA,gBARI;AASJC,EAAAA,cATI;AAUJC,EAAAA,UAVI;AAWJC,EAAAA;AAXI,IAYFC,WAZJ,C,CAcA;;AACA,MAAMC,QAAQ,GAAG,6BAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBiB,CAAjB;;eAkBe,gCAAQ,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACvCD,EAAAA,GAAG,CAACE,aAAJ,CAAkB,CAAlB;AACA,QAAM;AACJC,IAAAA,aAAa,GAAG,CAAC,aAAD,EAAgB,gBAAhB,CADZ;AAEJC,IAAAA,iBAAiB,GAAG,CAAC,KAAD,CAFhB;AAGJC,IAAAA,qBAAqB,GAAG,KAHpB;AAIJC,IAAAA,KAAK,GAAG;AAJJ,MAKFL,OALJ;AAOA,QAAMM,oBAAoB,GAAG,IAAIC,GAAJ,CAAQJ,iBAAR,CAA7B;;AAEA,QAAMK,OAAO,GAAG,CAACC,IAAD,EAAeC,QAAf,KAA4B;AAC1C;AACA,UAAMC,MAAM,GAAGF,IAAI,CAACG,IAAL,CAAUC,MAAV,CAAiBC,MAAjB,CAAwB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtD,aAAOD,IAAI,GAAGC,KAAK,CAACC,KAAN,CAAYC,GAA1B;AACD,KAFc,EAEZ,EAFY,CAAf;AAIA,UAAMC,WAAW,GAAGV,IAAI,CAACW,GAAL,CAAS,aAAT,CAApB;AAEAD,IAAAA,WAAW,CAACE,OAAZ,CAAqBC,IAAD,IAAU;AAC5B,UAAI,CAACnC,YAAY,CAACmC,IAAD,CAAb,IAAuB,CAAClC,kBAAkB,CAACkC,IAAD,CAA9C,EAAsD;AACpD,cAAMA,IAAI,CAACC,mBAAL,CACJ,sHADI,CAAN;AAGD;AACF,KAND;AAQAtC,IAAAA,KAAK,CAAC,2BAAD,EAA8B0B,MAA9B,CAAL;AACA,UAAMa,WAAW,GAAGnB,KAAK,GAAG,qCAAuBM,MAAvB,CAAH,GAAoCA,MAA7D;AACA,QAAIc,aAAa,GAAG,yBAAIpB,KAAK,GAAG,qCAAuBmB,WAAvB,CAAH,GAAyCA,WAAlD,CAApB,CAlB0C,CAoB1C;AACA;;AACA,QAAIC,aAAa,CAACC,WAAd,CAA0BC,MAA1B,GAAmC,CAAvC,EAA0C;AACxC,WAAK,MAAMC,UAAX,IAAyBH,aAAa,CAACC,WAAvC,EAAoD;AAClD,YAAI,CAACE,UAAU,CAACC,IAAhB,EAAsB;AACpB,gBAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF;AACF;;AAED,QAAI9B,OAAO,CAAC+B,SAAR,IAAqB/B,OAAO,CAAC+B,SAAjC,EAA4C;AAC1CN,MAAAA,aAAa,GAAGzB,OAAO,CAAC+B,SAAR,CAAkBP,WAAlB,EAA+BC,aAA/B,CAAhB;AACD;;AAED,UAAMO,IAAI,GAAG,gCAAaP,aAAb,CAAb;AACA,QAAIQ,UAAU,GAAG,KAAjB;;AAEA,QAAId,WAAW,CAACQ,MAAhB,EAAwB;AACtB,YAAMO,mBAAmB,GAAGF,IAAI,CAACG,UAAL,CAAgBC,IAAhB,CAAsBC,QAAD,IAAc;AAC7D,eAAOA,QAAQ,CAACC,GAAT,CAAarB,KAAb,KAAuB,aAA9B;AACD,OAF2B,CAA5B;AAIA,YAAMsB,gBAAgB,GAAGL,mBAAmB,CAACjB,KAA7C;AAEA,YAAMuB,gBAAgB,GAAGrB,WAAW,CAACsB,GAAZ,CAAiBnB,IAAD,IAAU;AACjD,eAAO7B,gBAAgB,CAAC6B,IAAI,CAACV,IAAN,EAAYjB,UAAU,CAAC,aAAD,CAAtB,CAAvB;AACD,OAFwB,CAAzB;AAIA,YAAM+C,cAAc,GAAGhD,cAAc,CACnCD,gBAAgB,CAAC8C,gBAAD,EAAmB5C,UAAU,CAAC,QAAD,CAA7B,CADmB,EAEnC6C,gBAFmC,CAArC;AAKAN,MAAAA,mBAAmB,CAACjB,KAApB,GAA4BvB,cAAc,CAACgB,QAAD,EAAW,CAACgC,cAAD,CAAX,CAA1C;AAEAT,MAAAA,UAAU,GAAG,IAAb;AACD;;AAEDhD,IAAAA,KAAK,CAAC,iCAAD,EAAoC+C,IAApC,CAAL;AAEA,WAAO,CAACA,IAAD,EAAOC,UAAP,CAAP;AACD,GA7DD;;AA+DA,SAAO;AACLU,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,CAAEC,WAAF,EAAuB;AAC5B,cAAMC,QAAQ,GAAG,EAAjB;AACA,cAAMC,eAAe,GAAG,EAAxB;AACA,cAAMrC,QAAQ,GAAGmC,WAAW,CAACG,KAAZ,CAAkBC,qBAAlB,CAAwC,QAAxC,CAAjB;AACA,YAAIhB,UAAU,GAAG,KAAjB;AACA,YAAIiB,QAAQ,GAAG,KAAf;AAEAL,QAAAA,WAAW,CAACM,QAAZ,CAAqB;AACnBC,UAAAA,cAAc,EAAE;AACdC,YAAAA,KAAK,CAAEC,QAAF,EAAY;AACf,oBAAMC,MAAM,GAAGD,QAAQ,CAAClC,GAAT,CAAa,QAAb,CAAf;AACA,oBAAM;AAACoC,gBAAAA,SAAS,EAAEC;AAAZ,kBAAoBH,QAAQ,CAAC1C,IAAnC;;AAEA,kBAAI2C,MAAM,CAACpE,YAAP,MAAyBoE,MAAM,CAACG,MAAP,CAAc,MAAd,EAAsB,SAAtB,CAA7B,EAA+D;AAC7D,sBAAM,CAAC;AAACzC,kBAAAA,KAAK,EAAE0C;AAAR,iBAAD,IAAuBF,IAA7B;;AACA,oBAAIvD,aAAa,CAAC0D,IAAd,CAAoBjD,MAAD,IAAY;AACjC,yBAAOP,qBAAqB,GAAGuD,SAAS,CAACE,QAAV,CAAmBlD,MAAnB,CAAH,GAAgCgD,SAAS,KAAKhD,MAA1E;AACD,iBAFG,CAAJ,EAEI;AACF,sBAAI2C,QAAQ,CAACQ,UAAT,CAAoBC,oBAApB,EAAJ,EAAgD;AAC9C,0BAAMC,cAAc,GAAGV,QAAQ,CAACQ,UAAT,CAAoBG,MAApB,CAA2BC,YAA3B,CAAwC,CAAxC,CAAvB;;AAEA,wBAAItE,eAAe,CAACoE,cAAc,CAACG,EAAhB,CAAnB,EAAwC;AACtC,4BAAMC,WAAW,GAAGJ,cAAc,CAACG,EAAf,CAAkBhC,UAAlB,CAA6BC,IAA7B,CAAmCC,QAAD,IAAc;AAClE,+BAAO/B,oBAAoB,CAAC+D,GAArB,CAAyBhC,QAAQ,CAACC,GAAT,CAAaT,IAAtC,CAAP;AACD,uBAFmB,CAApB;AAGAiB,sBAAAA,QAAQ,CAACwB,IAAT,CAAcF,WAAW,CAAC9B,GAAZ,CAAgBT,IAA9B;;AAEA,0BAAImC,cAAc,CAACG,EAAf,CAAkBhC,UAAlB,CAA6BR,MAA7B,KAAwC,CAA5C,EAA+C;AAC7CoB,wBAAAA,eAAe,CAACuB,IAAhB,CAAqB;AACnBC,0BAAAA,gBAAgB,EAAE,IADC;AAEnB9D,0BAAAA,IAAI,EAAE6C,QAAQ,CAACQ;AAFI,yBAArB;AAID;;AAEDE,sBAAAA,cAAc,CAACG,EAAf,CAAkBhC,UAAlB,GAA+B6B,cAAc,CAACG,EAAf,CAAkBhC,UAAlB,CAA6BqC,MAA7B,CAAqCnC,QAAD,IAAc;AAC/E,+BAAO,CAAC/B,oBAAoB,CAAC+D,GAArB,CAAyBhC,QAAQ,CAACC,GAAT,CAAaT,IAAtC,CAAR;AACD,uBAF8B,CAA/B;AAIA;AACD;;AAEDiB,oBAAAA,QAAQ,CAACwB,IAAT,CAAcN,cAAc,CAACG,EAAf,CAAkBtC,IAAhC;AACAkB,oBAAAA,eAAe,CAACuB,IAAhB,CAAqB;AACnBC,sBAAAA,gBAAgB,EAAE,IADC;AAEnB9D,sBAAAA,IAAI,EAAE6C,QAAQ,CAACQ;AAFI,qBAArB;AAID;AACF;AACF;AACF;;AAzCa,WADG;;AA4CnBW,UAAAA,iBAAiB,CAAEhE,IAAF,EAAgB;AAC/B,kBAAMkD,SAAS,GAAGlD,IAAI,CAACG,IAAL,CAAUD,MAAV,CAAiBM,KAAnC;AACA,kBAAMyD,YAAY,GAAGjE,IAAI,CAACG,IAAL,CAAU+D,UAAV,CAAqBvC,IAArB,CAA2BwC,SAAD,IAAe;AAC5D,kBAAIvF,iBAAiB,CAACuF,SAAD,CAArB,EAAkC;AAChC,uBAAOtE,oBAAoB,CAAC+D,GAArB,CAAyBO,SAAS,CAACC,KAAV,CAAgBhD,IAAzC,CAAP;AACD;;AAED,kBAAIvC,wBAAwB,CAACsF,SAAD,CAA5B,EAAyC;AACvC,uBAAO1E,aAAa,CAAC0D,IAAd,CAAoBjD,MAAD,IAAY;AACpC,yBAAOP,qBAAqB,GAAGuD,SAAS,CAACE,QAAV,CAAmBlD,MAAnB,CAAH,GAAgCgD,SAAS,KAAKhD,MAA1E;AACD,iBAFM,CAAP;AAGD;;AAED,qBAAO,IAAP;AACD,aAZoB,CAArB;;AAcA,gBAAI+D,YAAJ,EAAkB;AAChB5B,cAAAA,QAAQ,CAACwB,IAAT,CAAcI,YAAY,CAACG,KAAb,CAAmBhD,IAAjC;AACAkB,cAAAA,eAAe,CAACuB,IAAhB,CAAqB;AACnBC,gBAAAA,gBAAgB,EAAEG,YADC;AAEnBjE,gBAAAA;AAFmB,eAArB;AAID;AACF,WAnEkB;;AAoEnBqE,UAAAA,wBAAwB,CAAErE,IAAF,EAAgB;AACtC,gBACEqC,QAAQ,CAACc,IAAT,CAAe/B,IAAD,IAAU;AACtB,qBAAO1C,YAAY,CAACsB,IAAI,CAACG,IAAL,CAAUmE,GAAX,EAAgB;AAAClD,gBAAAA;AAAD,eAAhB,CAAnB;AACD,aAFD,CADF,EAIE;AACA,kBAAI;AACF5C,gBAAAA,KAAK,CAAC,OAAD,EAAUwB,IAAI,CAACG,IAAL,CAAUI,KAApB,CAAL;AACA,sBAAM,CAACgB,IAAD,EAAOgD,IAAP,IAAexE,OAAO,CAACC,IAAI,CAACW,GAAL,CAAS,OAAT,CAAD,EAAoBV,QAApB,CAA5B;AAEAuB,gBAAAA,UAAU,GAAGA,UAAU,IAAI+C,IAA3B;AAEAvE,gBAAAA,IAAI,CAACwE,WAAL,CAAiB/F,SAAS,CAAC8C,IAAD,CAA1B;AACD,eAPD,CAOE,OAAOkD,KAAP,EAAc;AACd;AACAC,gBAAAA,OAAO,CAACD,KAAR,CAAc,OAAd,EAAuBA,KAAvB;AACAhC,gBAAAA,QAAQ,GAAG,IAAX;AACD;AACF;AACF;;AAvFkB,SAArB,EAP4B,CAiG5B;;AACA,YAAI,CAACA,QAAL,EAAe;AACb,eAAK,MAAM;AAACqB,YAAAA,gBAAD;AAAmB9D,YAAAA,IAAI,EAAE2E;AAAzB,WAAX,IAAwDrC,eAAxD,EAAyE;AACvE,gBAAIwB,gBAAgB,KAAK,IAAzB,EAA+B;AAC7Ba,cAAAA,eAAe,CAACC,MAAhB;AACA;AACD;;AACD,gBAAID,eAAe,CAACxE,IAAhB,CAAqB+D,UAArB,CAAgChD,MAAhC,KAA2C,CAA/C,EAAkD;AAChDyD,cAAAA,eAAe,CAACC,MAAhB;AACD,aAFD,MAEO;AACLD,cAAAA,eAAe,CAACxE,IAAhB,CAAqB+D,UAArB,GAAkCS,eAAe,CAACxE,IAAhB,CAAqB+D,UAArB,CAAgCH,MAAhC,CAAwCI,SAAD,IAAe;AACtF,uBAAOA,SAAS,KAAKL,gBAArB;AACD,eAFiC,CAAlC;AAGD;AACF;AACF;;AAED,YAAItC,UAAJ,EAAgB;AACdY,UAAAA,WAAW,CAACyC,gBAAZ,CACE,MADF,EAEE/F,mBAAmB,CAAC,OAAD,EAAU,CAACC,kBAAkB,CAACkB,QAAD,EAAWxB,SAAS,CAACY,QAAD,CAApB,CAAnB,CAAV,CAFrB;AAID;AACF;;AAzHM;AADJ,GAAP;AA6HD,CAvMc,C","sourcesContent":["/* eslint-disable prefer-exponentiation-operator */\n// @flow\n\nimport {types} from '@babel/core';\nimport {declare} from '@babel/helper-plugin-utils';\nimport {parseExpression} from '@babel/parser';\nimport parseLiteral from 'babel-literal-to-ast';\nimport gql from 'graphql-tag';\nimport createDebug from 'debug';\nimport {stripIgnoredCharacters} from 'graphql';\n\nconst debug = createDebug('babel-plugin-graphql-tag');\nconst {\n  cloneDeep,\n  isIdentifier,\n  isMemberExpression,\n  isImportSpecifier,\n  isImportDefaultSpecifier,\n  variableDeclaration,\n  variableDeclarator,\n  memberExpression,\n  callExpression,\n  identifier,\n  isObjectPattern,\n} = types;\n\n// eslint-disable-next-line no-restricted-syntax\nconst uniqueFn = parseExpression(`\n  (definitions) => {\n    const names = {};\n    return definitions.filter(definition => {\n      if (definition.kind !== 'FragmentDefinition') {\n        return true;\n      }\n      const name = definition.name.value;\n      if (names[name]) {\n        return false;\n      } else {\n        names[name] = true;\n        return true;\n      }\n    });\n  }\n`);\n\nexport default declare((api, options) => {\n  api.assertVersion(7);\n  const {\n    importSources = ['graphql-tag', '@apollo/client'],\n    gqlTagIdentifiers = ['gql'],\n    onlyMatchImportSuffix = false,\n    strip = false,\n  } = options;\n\n  const gqlTagIdentifiersSet = new Set(gqlTagIdentifiers);\n\n  const compile = (path: Object, uniqueId) => {\n    // eslint-disable-next-line unicorn/no-reduce\n    const source = path.node.quasis.reduce((head, quasi) => {\n      return head + quasi.value.raw;\n    }, '');\n\n    const expressions = path.get('expressions');\n\n    expressions.forEach((expr) => {\n      if (!isIdentifier(expr) && !isMemberExpression(expr)) {\n        throw expr.buildCodeFrameError(\n          'Only identifiers or member expressions are allowed by this plugin as an interpolation in a graphql template literal.',\n        );\n      }\n    });\n\n    debug('compiling a GraphQL query', source);\n    const finalSource = strip ? stripIgnoredCharacters(source) : source;\n    let queryDocument = gql(strip ? stripIgnoredCharacters(finalSource) : finalSource);\n\n    // If a document contains only one operation, that operation may be unnamed:\n    // https://facebook.github.io/graphql/#sec-Language.Query-Document\n    if (queryDocument.definitions.length > 1) {\n      for (const definition of queryDocument.definitions) {\n        if (!definition.name) {\n          throw new Error('GraphQL query must have name.');\n        }\n      }\n    }\n\n    if (options.transform && options.transform) {\n      queryDocument = options.transform(finalSource, queryDocument);\n    }\n\n    const body = parseLiteral(queryDocument);\n    let uniqueUsed = false;\n\n    if (expressions.length) {\n      const definitionsProperty = body.properties.find((property) => {\n        return property.key.value === 'definitions';\n      });\n\n      const definitionsArray = definitionsProperty.value;\n\n      const extraDefinitions = expressions.map((expr) => {\n        return memberExpression(expr.node, identifier('definitions'));\n      });\n\n      const allDefinitions = callExpression(\n        memberExpression(definitionsArray, identifier('concat')),\n        extraDefinitions,\n      );\n\n      definitionsProperty.value = callExpression(uniqueId, [allDefinitions]);\n\n      uniqueUsed = true;\n    }\n\n    debug('created a static representation', body);\n\n    return [body, uniqueUsed];\n  };\n\n  return {\n    visitor: {\n      Program (programPath: Object) {\n        const tagNames = [];\n        const pendingDeletion = [];\n        const uniqueId = programPath.scope.generateUidIdentifier('unique');\n        let uniqueUsed = false;\n        let hasError = false;\n\n        programPath.traverse({\n          CallExpression: {\n            enter (nodePath) {\n              const callee = nodePath.get('callee');\n              const {arguments: args} = nodePath.node;\n\n              if (callee.isIdentifier() && callee.equals('name', 'require')) {\n                const [{value: pathValue}] = args;\n                if (importSources.some((source) => {\n                  return onlyMatchImportSuffix ? pathValue.endsWith(source) : pathValue === source;\n                })) {\n                  if (nodePath.parentPath.isVariableDeclarator()) {\n                    const gqlDeclaration = nodePath.parentPath.parent.declarations[0];\n\n                    if (isObjectPattern(gqlDeclaration.id)) {\n                      const gqlProperty = gqlDeclaration.id.properties.find((property) => {\n                        return gqlTagIdentifiersSet.has(property.key.name);\n                      });\n                      tagNames.push(gqlProperty.key.name);\n\n                      if (gqlDeclaration.id.properties.length === 1) {\n                        pendingDeletion.push({\n                          defaultSpecifier: null,\n                          path: nodePath.parentPath,\n                        });\n                      }\n\n                      gqlDeclaration.id.properties = gqlDeclaration.id.properties.filter((property) => {\n                        return !gqlTagIdentifiersSet.has(property.key.name);\n                      });\n\n                      return;\n                    }\n\n                    tagNames.push(gqlDeclaration.id.name);\n                    pendingDeletion.push({\n                      defaultSpecifier: null,\n                      path: nodePath.parentPath,\n                    });\n                  }\n                }\n              }\n            },\n          },\n          ImportDeclaration (path: Object) {\n            const pathValue = path.node.source.value;\n            const gqlSpecifier = path.node.specifiers.find((specifier) => {\n              if (isImportSpecifier(specifier)) {\n                return gqlTagIdentifiersSet.has(specifier.local.name);\n              }\n\n              if (isImportDefaultSpecifier(specifier)) {\n                return importSources.some((source) => {\n                  return onlyMatchImportSuffix ? pathValue.endsWith(source) : pathValue === source;\n                });\n              }\n\n              return null;\n            });\n\n            if (gqlSpecifier) {\n              tagNames.push(gqlSpecifier.local.name);\n              pendingDeletion.push({\n                defaultSpecifier: gqlSpecifier,\n                path,\n              });\n            }\n          },\n          TaggedTemplateExpression (path: Object) {\n            if (\n              tagNames.some((name) => {\n                return isIdentifier(path.node.tag, {name});\n              })\n            ) {\n              try {\n                debug('quasi', path.node.quasi);\n                const [body, used] = compile(path.get('quasi'), uniqueId);\n\n                uniqueUsed = uniqueUsed || used;\n\n                path.replaceWith(cloneDeep(body));\n              } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('error', error);\n                hasError = true;\n              }\n            }\n          },\n        });\n\n        // Only delete import statement or specifier when there is no error\n        if (!hasError) {\n          for (const {defaultSpecifier, path: pathForDeletion} of pendingDeletion) {\n            if (defaultSpecifier === null) {\n              pathForDeletion.remove();\n              continue;\n            }\n            if (pathForDeletion.node.specifiers.length === 1) {\n              pathForDeletion.remove();\n            } else {\n              pathForDeletion.node.specifiers = pathForDeletion.node.specifiers.filter((specifier) => {\n                return specifier !== defaultSpecifier;\n              });\n            }\n          }\n        }\n\n        if (uniqueUsed) {\n          programPath.unshiftContainer(\n            'body',\n            variableDeclaration('const', [variableDeclarator(uniqueId, cloneDeep(uniqueFn))]),\n          );\n        }\n      },\n    },\n  };\n});\n"],"file":"index.js"}