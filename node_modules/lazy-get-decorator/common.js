"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** @internal */
function defaultFilter() {
    return true;
}
exports.defaultFilter = defaultFilter;
/** @internal */
function validateAndExtractMethodFromDescriptor(desc) {
    var originalMethod = desc.get;
    if (!originalMethod) {
        throw new Error('@LazyGetter can only decorate getters!');
    }
    else if (!desc.configurable) {
        throw new Error('@LazyGetter target must be configurable');
    }
    return originalMethod;
}
exports.validateAndExtractMethodFromDescriptor = validateAndExtractMethodFromDescriptor;
/** @internal */
function getterCommon(target, //tslint:disable-line:parameters-max-number
key, isStatic, enumerable, originalMethod, thisArg, args, setProto, makeNonConfigurable, resultSelector) {
    var value = originalMethod.apply(thisArg, args);
    if (resultSelector(value)) {
        var newDescriptor = {
            configurable: !makeNonConfigurable,
            enumerable: enumerable,
            value: value
        };
        if (isStatic || setProto) {
            Object.defineProperty(target, key, newDescriptor);
        }
        if (!isStatic) {
            Object.defineProperty(thisArg, key, newDescriptor);
        }
    }
    return value;
}
exports.getterCommon = getterCommon;
//# sourceMappingURL=common.js.map