import{ipcRenderer as s}from"electron";class t{constructor(){this.requestIdCounter=0,this.requests=new Map}async init(){s.on("-prisma",this.onIPCMessage.bind(this)),s.on("-project",this.onIPCMessage.bind(this)),s.on("-window",this.onIPCMessage.bind(this)),s.on("-update",this.onIPCMessage.bind(this)),s.on("-telemetry",this.onIPCMessage.bind(this))}request(t){const e=this.requestIdCounter;return this.requestIdCounter++,new Promise(((n,r)=>{this.requests.set(e,{resolve:n,reject:r}),s.send(t.channel,{requestId:e,action:t.action,payload:t.payload})}))}onIPCMessage(s,t){var e;const n=function(s){return JSON.parse(s,((s,t)=>"string"==typeof t&&t.startsWith("PrismaBigInt::")?BigInt(t.substr("PrismaBigInt::".length)):"string"==typeof t&&t.startsWith("PrismaBytes::")?t.substr("PrismaBytes::".length):t))}(t);null==(e=this.requests.get(n.requestId))||e.resolve(n.payload),this.requests.delete(n.requestId)}}export{t as ElectronBrowserTransport};
