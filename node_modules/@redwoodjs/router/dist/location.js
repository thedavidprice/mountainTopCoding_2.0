"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.useLocation = exports.LocationContext = exports.LocationProvider = void 0;

var _react = _interopRequireDefault(require("react"));

var _internal = require("./internal");

const LocationContext = (0, _internal.createNamedContext)('Location');
exports.LocationContext = LocationContext;

class LocationProvider extends _react.default.Component {
  constructor(...args) {
    super(...args);
    this.HISTORY_LISTENER_ID = undefined;
    this.state = {
      context: this.getContext()
    };
  }

  getContext() {
    var _this$context, _this$context2, _this$context3;

    const windowLocation = typeof window !== 'undefined' ? window.location : {
      pathname: ((_this$context = this.context) === null || _this$context === void 0 ? void 0 : _this$context.pathname) || '',
      search: ((_this$context2 = this.context) === null || _this$context2 === void 0 ? void 0 : _this$context2.search) || '',
      hash: ((_this$context3 = this.context) === null || _this$context3 === void 0 ? void 0 : _this$context3.hash) || ''
    };
    const {
      pathname,
      search,
      hash
    } = this.props.location || windowLocation;
    return {
      pathname,
      search,
      hash
    };
  }

  componentDidMount() {
    this.HISTORY_LISTENER_ID = _internal.gHistory.listen(() => {
      this.setState(() => ({
        context: this.getContext()
      }));
    });
  }

  componentWillUnmount() {
    if (this.HISTORY_LISTENER_ID) {
      _internal.gHistory.remove(this.HISTORY_LISTENER_ID);
    }
  }

  render() {
    return /*#__PURE__*/_react.default.createElement(LocationContext.Provider, {
      value: this.state.context
    }, this.props.children);
  }

}

exports.LocationProvider = LocationProvider;
LocationProvider.contextType = LocationContext;

const useLocation = () => {
  const location = _react.default.useContext(LocationContext);

  if (location === undefined) {
    throw new Error('useLocation must be used within a LocationProvider');
  }

  return location;
};

exports.useLocation = useLocation;