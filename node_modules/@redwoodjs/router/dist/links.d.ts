/// <reference types="react" />
/**
 * Returns true if the URL for the given "route" value matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * <NavLink>.
 */
declare const useMatch: (route: string) => {
    match: boolean;
    params?: undefined;
} | {
    match: boolean;
    params: Record<string, unknown>;
};
interface LinkProps {
    to: string;
}
declare const Link: import("react").ForwardRefExoticComponent<LinkProps & import("react").AnchorHTMLAttributes<HTMLAnchorElement> & import("react").RefAttributes<HTMLAnchorElement>>;
interface NavLinkProps {
    to: string;
    activeClassName: string;
}
declare const NavLink: import("react").ForwardRefExoticComponent<NavLinkProps & import("react").AnchorHTMLAttributes<HTMLAnchorElement> & import("react").RefAttributes<HTMLAnchorElement>>;
interface RedirectProps {
    /** The name of the route to redirect to */
    to: string;
}
/**
 * A declarative way to redirect to a route name
 */
declare const Redirect: ({ to }: RedirectProps) => null;
export { Link, NavLink, useMatch, Redirect };
//# sourceMappingURL=links.d.ts.map