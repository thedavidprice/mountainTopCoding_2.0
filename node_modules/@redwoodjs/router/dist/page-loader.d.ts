import React from 'react';
import { Spec } from './internal';
export interface PageLoadingContextInterface {
    loading: boolean;
}
export declare const PageLoadingContext: React.Context<PageLoadingContextInterface | undefined>;
export declare const usePageLoadingContext: () => PageLoadingContextInterface;
interface State {
    Page?: React.ComponentType;
    pageName?: string;
    slowModuleImport: boolean;
    params?: Record<string, string>;
}
interface Props {
    spec: Spec;
    delay?: number;
    params?: Record<string, string>;
    whileLoadingPage?: () => React.ReactElement | null;
}
export declare class PageLoader extends React.Component<Props> {
    state: State;
    loadingTimeout?: number;
    propsChanged: (p1: Props, p2: Props) => boolean;
    stateChanged: (s1: State, s2: State) => boolean;
    shouldComponentUpdate(nextProps: Props, nextState: State): boolean;
    componentDidMount(): void;
    announcementRef: React.RefObject<HTMLDivElement>;
    componentDidUpdate(prevProps: Props, prevState: State): void;
    componentWillUnmount(): void;
    clearLoadingTimeout: () => void;
    startPageLoadTransition: (props: Props) => Promise<void>;
    render(): JSX.Element | null;
}
export {};
//# sourceMappingURL=page-loader.d.ts.map