import React, { ReactElement, ReactNode } from 'react';
/** Create a React Context with the given name. */
declare const createNamedContext: <T extends unknown>(name: string, defaultValue?: T | undefined) => React.Context<T | undefined>;
export interface ParamType {
    constraint: RegExp;
    transform: (value: any) => unknown;
}
/**
 * Determine if the given route is a match for the given pathname. If so,
 * extract any named params and return them in an object.
 *
 * route         - The route path as specified in the <Route path={...} />
 * pathname      - The pathname from the window.location.
 * allParamTypes - The object containing all param type definitions.
 *
 * Examples:
 *
 *  matchPath('/blog/{year}/{month}/{day}', '/blog/2019/12/07')
 *  => { match: true, params: { year: '2019', month: '12', day: '07' }}
 *
 *  matchPath('/about', '/')
 *  => { match: false }
 *
 *  matchPath('/post/{id:Int}', '/post/7')
 *  => { match: true, params: { id: 7 }}
 */
declare const matchPath: (route: string, pathname: string, paramTypes?: Record<string, ParamType> | undefined) => {
    match: boolean;
    params?: undefined;
} | {
    match: boolean;
    params: Record<string, unknown>;
};
/**
 * Parse the given search string into key/value pairs and return them in an
 * object.
 *
 * Examples:
 *
 *  parseSearch('?key1=val1&key2=val2')
 *  => { key1: 'val1', key2: 'val2' }
 *
 * @fixme
 * This utility ignores keys with multiple values such as `?foo=1&foo=2`.
 */
declare const parseSearch: (search: string | string[][] | Record<string, string> | URLSearchParams | undefined) => {};
/**
 * Validate a path to make sure it follows the router's rules. If any problems
 * are found, a descriptive Error will be thrown, as problems with routes are
 * critical enough to be considered fatal.
 */
declare const validatePath: (path: string) => void;
/**
 * Take a given route path and replace any named parameters with those in the
 * given args object. Any extra params not used in the path will be appended
 * as key=value pairs in the search part.
 *
 * Examples:
 *
 *   replaceParams('/tags/{tag}', { tag: 'code', extra: 'foo' })
 *   => '/tags/code?extra=foo
 */
declare const replaceParams: (path: string, args?: Record<string, unknown>) => string;
declare function isReactElement(node: ReactNode): node is ReactElement;
declare function flattenAll(children: ReactNode): ReactNode[];
export { createNamedContext, matchPath, parseSearch, validatePath, replaceParams, isReactElement, flattenAll, };
/**
 * gets the announcement for the new page.
 * called in page-loader's `componentDidUpdate`.
 *
 * the order of priority is:
 * 1. RouteAnnouncement (the most specific one)
 * 2. h1
 * 3. document.title
 * 4. location.pathname
 */
export declare const getAnnouncement: () => string;
export declare const getFocus: () => HTMLElement | null;
export declare const resetFocus: () => void;
//# sourceMappingURL=util.d.ts.map