/// <reference types="react" />
import { RouterContextProviderProps } from "./router-context";
import type { AvailableRoutes } from "./index";
declare const namedRoutes: AvailableRoutes;
declare type PageType = Spec | React.ComponentType<unknown> | ((props: any) => JSX.Element);
interface RouteProps {
    path: string;
    page: PageType;
    name: string;
    prerender?: boolean;
    whileLoading?: () => React.ReactElement | null;
}
interface RedirectRouteProps {
    path: string;
    redirect: string;
}
interface NotFoundRouteProps {
    notfound: boolean;
    page: PageType;
}
declare type InternalRouteProps = Partial<RouteProps & RedirectRouteProps & NotFoundRouteProps>;
declare const Route: React.VFC<RouteProps | RedirectRouteProps | NotFoundRouteProps>;
interface PrivateProps {
    /** The page name where a user will be redirected when not authenticated */
    unauthenticated: string;
    role?: string | string[];
}
/**
 * `Routes` nested in `Private` require authentication.
 * When a user is not authenticated and attempts to visit this route they will be
 * redirected to `unauthenticated` route.
 */
declare const Private: React.FC<PrivateProps>;
declare function isRoute(node: React.ReactNode): node is React.ReactElement<InternalRouteProps>;
interface RouterProps extends RouterContextProviderProps {
}
declare const Router: React.FC<RouterProps>;
export interface Spec {
    name: string;
    loader: () => Promise<{
        default: React.ComponentType;
    }>;
}
export { Router, Route, Private, namedRoutes as routes, isRoute, PageType };
//# sourceMappingURL=router.d.ts.map