"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.useRouterStateSetter = exports.useRouterState = exports.RouterContextProvider = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _react = _interopRequireWildcard(require("react"));

var _auth = require("@redwoodjs/auth");

var _router = require("./router");

var _util = require("./util");

const DEFAULT_PAGE_LOADING_DELAY = 1000; // milliseconds

const RouterStateContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const RouterSetContext = /*#__PURE__*/(0, _react.createContext)(undefined);

function stateReducer(state, newState) {
  return { ...state,
    ...newState
  };
}

const RouterContextProvider = ({
  useAuth: customUseAuth,
  paramTypes,
  pageLoadingDelay = DEFAULT_PAGE_LOADING_DELAY,
  children
}) => {
  var _context, _context2;

  // Create an internal representation of all the routes and paths.
  const routes = (0, _map.default)(_context = (0, _filter.default)(_context2 = (0, _util.flattenAll)(children)).call(_context2, _router.isRoute)).call(_context, route => {
    const {
      name,
      path,
      page
    } = route.props;
    return {
      name,
      path,
      page
    };
  });
  const [state, setState] = (0, _react.useReducer)(stateReducer, {
    useAuth: customUseAuth || _auth.useAuth,
    paramTypes,
    pageLoadingDelay,
    routes
  });
  return /*#__PURE__*/_react.default.createElement(RouterStateContext.Provider, {
    value: state
  }, /*#__PURE__*/_react.default.createElement(RouterSetContext.Provider, {
    value: setState
  }, children));
};

exports.RouterContextProvider = RouterContextProvider;

const useRouterState = () => {
  const context = (0, _react.useContext)(RouterStateContext);

  if (context === undefined) {
    throw new Error('useRouterState must be used within a RouterContextProvider');
  }

  return context;
};

exports.useRouterState = useRouterState;

const useRouterStateSetter = () => {
  const context = (0, _react.useContext)(RouterSetContext);

  if (context === undefined) {
    throw new Error('useRouterStateSetter must be used within a RouterContextProvider');
  }

  return context;
};

exports.useRouterStateSetter = useRouterStateSetter;