"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.Redirect = exports.useMatch = exports.NavLink = exports.Link = void 0;

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _internal = require("./internal");

/**
 * Returns true if the URL for the given "route" value matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * <NavLink>.
 */
const useMatch = route => {
  const location = (0, _internal.useLocation)();

  if (!location) {
    return {
      match: false
    };
  }

  return (0, _internal.matchPath)(route, location.pathname);
};

exports.useMatch = useMatch;
const Link = /*#__PURE__*/(0, _react.forwardRef)(({
  to,
  onClick,
  ...rest
}, ref) => /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({
  href: to,
  ref: ref
}, rest, {
  onClick: event => {
    if (event.button !== 0 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
      return;
    }

    event.preventDefault();

    if (onClick) {
      const result = onClick(event);

      if (typeof result !== 'boolean' || result) {
        (0, _internal.navigate)(to);
      }
    } else {
      (0, _internal.navigate)(to);
    }
  }
})));
exports.Link = Link;
const NavLink = /*#__PURE__*/(0, _react.forwardRef)(({
  to,
  activeClassName,
  className,
  onClick,
  ...rest
}, ref) => {
  var _context;

  const matchInfo = useMatch(to);
  const theClassName = (0, _filter.default)(_context = [className, matchInfo.match && activeClassName]).call(_context, Boolean).join(' ');
  return /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({
    href: to,
    ref: ref,
    className: theClassName
  }, rest, {
    onClick: event => {
      if (event.button !== 0 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
        return;
      }

      event.preventDefault();

      if (onClick) {
        const result = onClick(event);

        if (typeof result !== 'boolean' || result) {
          (0, _internal.navigate)(to);
        }
      } else {
        (0, _internal.navigate)(to);
      }
    }
  }));
});
exports.NavLink = NavLink;

/**
 * A declarative way to redirect to a route name
 */
const Redirect = ({
  to
}) => {
  (0, _react.useEffect)(() => (0, _internal.navigate)(to), [to]);
  return null;
};

exports.Redirect = Redirect;