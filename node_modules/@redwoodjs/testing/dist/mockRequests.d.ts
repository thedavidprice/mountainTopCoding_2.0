import { RequestHandler, GraphQLMockedContext, GraphQLMockedRequest } from 'msw';
/**
 * Plugs fetch for the correct target in order to capture requests.
 *
 * Request handlers can be registered lazily (via `mockGraphQL<Query|Mutation>`),
 * the queue will be drained and used.
 */
export declare const startMSW: (target: 'node' | 'browsers') => Promise<any>;
export declare const setupRequestHandlers: () => void;
export declare const registerHandler: (handler: RequestHandler) => void;
export declare type DataFunction = (variables: Record<string, any>, { req, ctx, }: {
    req: GraphQLMockedRequest;
    ctx: GraphQLMockedContext<Record<string, any>>;
}) => Record<string, unknown>;
export declare const mockGraphQLQuery: (operation: string, data: DataFunction | Record<string, unknown>) => Record<string, any> | DataFunction;
export declare const mockGraphQLMutation: (operation: string, data: DataFunction | Record<string, unknown>) => Record<string, any> | DataFunction;
export declare const mockedUserMeta: {
    currentUser: Record<string, unknown> | null;
};
export declare const mockCurrentUser: (user: Record<string, unknown> | null) => void;
//# sourceMappingURL=mockRequests.d.ts.map