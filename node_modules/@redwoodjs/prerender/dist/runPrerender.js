"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.writePrerenderedHtmlFile = exports.runPrerender = void 0;

require("core-js/modules/esnext.weak-map.delete-all.js");

var _fs = _interopRequireDefault(require("fs"));

var _react = _interopRequireDefault(require("react"));

var _cheerio = _interopRequireDefault(require("cheerio"));

var _server = _interopRequireDefault(require("react-dom/server"));

var _internal = require("@redwoodjs/internal");

var _router = require("@redwoodjs/router");

var _babelPluginRedwoodPrerenderMediaImports = _interopRequireDefault(require("./babelPlugins/babel-plugin-redwood-prerender-media-imports"));

var _internal2 = require("./internal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const rwWebPaths = (0, _internal.getPaths)().web;

const runPrerender = async ({
  routerPath
}) => {
  // Prerender specific configuration
  // extends projects web/babelConfig
  (0, _internal.registerWebSideBabelHook)({
    overrides: [{
      plugins: [['ignore-html-and-css-imports'], // webpack/postcss handles CSS imports
      ['babel-plugin-module-resolver', {
        alias: {
          src: rwWebPaths.src
        },
        root: [(0, _internal.getPaths)().web.base],
        // needed for respecting users' custom aliases in web/.babelrc
        // See https://github.com/tleunen/babel-plugin-module-resolver/blob/master/DOCS.md#cwd
        cwd: 'babelrc',
        loglevel: 'silent' // to silence the unnecessary warnings

      }, 'prerender-module-resolver' // add this name, so it doesn't overwrite custom module resolvers in users' web/.babelrc
      ], [_babelPluginRedwoodPrerenderMediaImports.default]]
    }]
  });
  (0, _internal2.registerShims)();

  const indexContent = _fs.default.readFileSync((0, _internal2.getRootHtmlPath)()).toString();

  const {
    default: App
  } = await Promise.resolve(`${(0, _internal.getPaths)().web.app}`).then(s => _interopRequireWildcard(require(s)));

  const componentAsHtml = _server.default.renderToString( /*#__PURE__*/_react.default.createElement(_router.LocationProvider, {
    location: {
      pathname: routerPath
    }
  }, /*#__PURE__*/_react.default.createElement(App, null)));

  const {
    helmet
  } = global.__REDWOOD__HELMET_CONTEXT;

  const indexHtmlTree = _cheerio.default.load(indexContent);

  if (helmet) {
    const helmetElements = `
  ${helmet === null || helmet === void 0 ? void 0 : helmet.link.toString()}
  ${helmet === null || helmet === void 0 ? void 0 : helmet.meta.toString()}
  ${helmet === null || helmet === void 0 ? void 0 : helmet.script.toString()}
  ${helmet === null || helmet === void 0 ? void 0 : helmet.noscript.toString()}
  `; // Add all head elements

    indexHtmlTree('head').prepend(helmetElements); // Only change the title, if its not empty

    if (_cheerio.default.load(helmet === null || helmet === void 0 ? void 0 : helmet.title.toString())('title').text() !== '') {
      indexHtmlTree('title').replaceWith(helmet === null || helmet === void 0 ? void 0 : helmet.title.toString());
    }
  } // This is set by webpack by the html plugin


  indexHtmlTree('server-markup').replaceWith(componentAsHtml);
  const renderOutput = indexHtmlTree.html();
  return renderOutput;
}; // Used by cli at build time


exports.runPrerender = runPrerender;

const writePrerenderedHtmlFile = (outputHtmlPath, content) => {
  // Copy default index.html to 200.html first
  // This is to prevent recursively rendering the home page
  if (outputHtmlPath === 'web/dist/index.html') {
    _fs.default.copyFileSync(outputHtmlPath, 'web/dist/200.html');
  }

  (0, _internal2.writeToDist)(outputHtmlPath, content);
};

exports.writePrerenderedHtmlFile = writePrerenderedHtmlFile;