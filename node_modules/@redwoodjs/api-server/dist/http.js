"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.http = exports.setLambdaFunctions = void 0;

var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/date/now"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _express = _interopRequireDefault(require("express"));

var _glob = _interopRequireDefault(require("glob"));

var _lodash = _interopRequireDefault(require("lodash.escape"));

var _morgan = _interopRequireDefault(require("morgan"));

var _internal = require("@redwoodjs/internal");

var _awsLambda = require("./requestHandlers/awsLambda");

const rwjsPaths = (0, _internal.getPaths)();
const LAMBDA_FUNCTIONS = {};

const setLambdaFunctions = foundFunctions => {
  for (const fnPath of foundFunctions) {
    const routeName = _path.default.basename(fnPath).replace('.js', '');

    const {
      handler
    } = require(fnPath);

    LAMBDA_FUNCTIONS[routeName] = handler;

    if (!handler) {
      console.warn(routeName, 'at', fnPath, 'does not have a function called handler defined.');
    }
  }
};

exports.setLambdaFunctions = setLambdaFunctions;

const lambdaRequestHandler = async (req, res) => {
  const {
    routeName
  } = req.params;

  if (!LAMBDA_FUNCTIONS[routeName]) {
    const errorMessage = `Function "${routeName}" was not found.`;
    console.error(errorMessage);
    res.status(404).send((0, _lodash.default)(errorMessage));
    return;
  }

  return (0, _awsLambda.requestHandler)(req, res, LAMBDA_FUNCTIONS[routeName]);
};

const http = ({
  port = 8911,
  socket,
  rootPath
}) => {
  const app = (0, _express.default)();
  app.use(_bodyParser.default.text({
    type: ['text/*', 'application/json', 'multipart/form-data']
  }));
  app.use(_bodyParser.default.raw({
    type: '*/*',
    limit: process.env.BODY_PARSER_LIMIT
  }));
  app.use((0, _morgan.default)('dev'));
  app.all(`${rootPath}:routeName`, lambdaRequestHandler);
  app.all(`${rootPath}:routeName/*`, lambdaRequestHandler);
  const server = app.listen(socket || port, () => {
    const ts = (0, _now.default)();
    console.log('Importing API... ');

    const apiFunctions = _glob.default.sync('dist/functions/*.{ts,js}', {
      cwd: rwjsPaths.api.base,
      absolute: true
    });

    setLambdaFunctions(apiFunctions);
    console.log('Imported in', (0, _now.default)() - ts, 'ms');
  }).on('close', () => {
    if (socket) {
      _fs.default.rmSync(socket);
    }
  });
  return server;
};

exports.http = http;