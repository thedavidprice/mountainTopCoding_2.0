"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.webServerHandler = exports.bothServerHandler = exports.apiServerHandler = exports.webCliOptions = exports.apiCliOptions = exports.commonOptions = void 0;

var _internal = require("@redwoodjs/internal");

var _app = _interopRequireDefault(require("./app"));

var _withApiProxy = _interopRequireDefault(require("./middleware/withApiProxy"));

var _withFunctions = _interopRequireDefault(require("./middleware/withFunctions"));

var _withWebServer = _interopRequireDefault(require("./middleware/withWebServer"));

var _server = require("./server");

/*
 * This file has defines CLI handlers used by the redwood cli, for `rw serve`
 * Also used in index.ts for the api server
 */
const commonOptions = {
  port: {
    default: 8910,
    type: 'number',
    alias: 'p'
  },
  socket: {
    type: 'string'
  }
};
exports.commonOptions = commonOptions;
const apiCliOptions = {
  port: {
    default: 8911,
    type: 'number',
    alias: 'p'
  },
  socket: {
    type: 'string'
  },
  apiRootPath: {
    alias: ['rootPath', 'root-path'],
    default: '/',
    type: 'string',
    desc: 'Root path where your api functions are served',
    coerce: coerceRootPath
  }
};
exports.apiCliOptions = apiCliOptions;
const webCliOptions = {
  port: {
    default: 8910,
    type: 'number',
    alias: 'p'
  },
  socket: {
    type: 'string'
  },
  apiHost: {
    alias: 'api-host',
    type: 'string',
    desc: 'Forward requests from the apiProxyPath, defined in redwood.toml to this host'
  }
};
exports.webCliOptions = webCliOptions;

const apiServerHandler = ({
  port,
  socket,
  apiRootPath
}) => {
  let app = (0, _app.default)(); // Attach middleware

  app = (0, _withFunctions.default)(app, apiRootPath);
  (0, _server.startServer)({
    port,
    socket,
    app
  }).on('listening', () => {
    if (socket) {
      console.log(`Listening on ${socket}`);
    }

    console.log(`Listening on http://localhost:${port}${apiRootPath}`);
  });
};

exports.apiServerHandler = apiServerHandler;

const bothServerHandler = ({
  port,
  socket
}) => {
  const apiRootPath = coerceRootPath((0, _internal.getConfig)().web.apiProxyPath);
  let app = (0, _app.default)(); // Attach middleware

  app = (0, _withFunctions.default)(app, apiRootPath);
  app = (0, _withWebServer.default)(app);
  (0, _server.startServer)({
    port,
    socket,
    app
  }).on('listening', () => {
    if (socket) {
      console.log(`Listening on ${socket}`);
    }

    console.log(`Web server started on http://localhost:${port} `);
    console.log(`APIs Listening on http://localhost:${port}${apiRootPath}`);
  });
};

exports.bothServerHandler = bothServerHandler;

const webServerHandler = ({
  port,
  socket,
  apiHost
}) => {
  let app = (0, _app.default)(); // Attach middleware
  // We need to proxy api requests to prevent CORS issues

  if (apiHost) {
    const apiProxyPath = (0, _internal.getConfig)().web.apiProxyPath;
    app = (0, _withApiProxy.default)(app, {
      apiHost,
      apiProxyPath
    });
  }

  app = (0, _withWebServer.default)(app);
  (0, _server.startServer)({
    port,
    socket,
    app
  }).on('listening', () => {
    if (socket) {
      console.log(`Listening on ${socket}`);
    }

    console.log(`Web server started on http://localhost:${port} `);
  });
};

exports.webServerHandler = webServerHandler;

function coerceRootPath(path) {
  // Make sure that we create a root path that starts and ends with a slash (/)
  const prefix = path.charAt(0) !== '/' ? '/' : '';
  const suffix = path.charAt(path.length - 1) !== '/' ? '/' : '';
  return `${prefix}${path}${suffix}`;
}