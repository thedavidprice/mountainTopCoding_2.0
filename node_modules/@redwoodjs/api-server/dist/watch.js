#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/date/now"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));

var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));

var _child_process = require("child_process");

var _path = _interopRequireDefault(require("path"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _apiBuild = require("@redwoodjs/core/esbuild/apiBuild");

var _internal = require("@redwoodjs/internal");

const rwjsPaths = (0, _internal.getPaths)();

_dotenv.default.config({
  path: rwjsPaths.base
});

const tsInitialBuild = (0, _now.default)();
console.log('Building API...');
(0, _apiBuild.build)({
  incremental: true
}).then(buildResult => {
  let chokidarReady = false;
  let httpServer = (0, _child_process.fork)(_path.default.join(__dirname, 'index.js'));
  process.on('SIGINT', () => {
    var _buildResult$stop;

    console.log();
    console.log('Shutting down... ');
    httpServer.kill();
    (_buildResult$stop = buildResult.stop) === null || _buildResult$stop === void 0 ? void 0 : _buildResult$stop.call(buildResult);
    console.log('Done.');
    process.exit(0);
  });

  _chokidar.default.watch(rwjsPaths.api.base, {
    persistent: true,
    ignoreInitial: true,
    ignored: file => {
      var _context;

      return (0, _includes.default)(file).call(file, 'node_modules') || (0, _includes.default)(file).call(file, rwjsPaths.api.dist) || (0, _includes.default)(file).call(file, rwjsPaths.api.db) || (0, _some.default)(_context = ['.db', '.sqlite', '-journal', '.test.js', '.test.ts', '.scenarios.ts', '.scenarios.js']).call(_context, ext => (0, _endsWith.default)(file).call(file, ext));
    }
  }).on('ready', async () => {
    chokidarReady = true;
    console.log('Built in', (0, _now.default)() - tsInitialBuild, 'ms');
  }).on('all', async (eventName, filePath) => {
    // Chokidar emits when it's initial booting up, let's ignore those.
    if (!chokidarReady) {
      return;
    }

    console.log(`[${eventName}]`, `${filePath.replace(rwjsPaths.api.base, '')}`);
    const tsRebuild = (0, _now.default)();
    console.log('Building API...');

    try {
      var _buildResult$rebuild;

      await (buildResult === null || buildResult === void 0 ? void 0 : (_buildResult$rebuild = buildResult.rebuild) === null || _buildResult$rebuild === void 0 ? void 0 : _buildResult$rebuild.call(buildResult));
      console.log('Built in', (0, _now.default)() - tsRebuild, 'ms'); // Restart HTTP...

      httpServer.emit('exit');
      httpServer.kill();
      httpServer = (0, _child_process.fork)(_path.default.join(__dirname, 'index.js'));
    } catch (e) {
      console.error(e);
    }
  });
});