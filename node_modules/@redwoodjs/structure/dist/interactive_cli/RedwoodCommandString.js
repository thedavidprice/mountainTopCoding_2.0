"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedwoodCommandString = void 0;

var _yargsParser = _interopRequireDefault(require("yargs-parser"));

var _decorators = require("../x/decorators");

var _dec, _dec2, _class;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

/**
 * A value class wrapping a Redwood command string.
 * - perform basic validation on construction
 * - used throughout the package to representa a command (instead of using 'string')
 */
let RedwoodCommandString = (_dec = (0, _decorators.lazy)(), _dec2 = (0, _decorators.lazy)(), (_class = class RedwoodCommandString {
  constructor(original) {
    this.isComplete = true;
    this.original = original;
    let v = original;

    if (typeof v !== 'string') {
      throw new Error('redwood command must be a string');
    }

    if (v.trim().endsWith('...')) {
      this.isComplete = false;
      const pp = v.split('...');
      pp.pop();
      v = pp.join('');
    }

    const parts = v.trim().split(' ').map(s => s.trim());

    if (parts[0] === 'yarn') {
      parts.shift();
    }

    if (parts[0] === 'redwood' || parts[0] === 'rw') {
      parts.shift();
    }

    this.processed = parts.join(' ');
  }

  get parsed() {
    return (0, _yargsParser.default)(this.processed);
  }

  get isInterceptable() {
    let [a, b] = this.parsed._;

    if (a === 'g') {
      a = 'generate';
    }

    if (a !== 'generate') {
      return false;
    }

    if (b === 'sdl') {
      return false;
    } // <-- why?


    if (b === 'scaffold') {
      return false;
    } // <-- why?


    return true;
  }

}, (_applyDecoratedDescriptor(_class.prototype, "parsed", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "parsed"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "isInterceptable", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, "isInterceptable"), _class.prototype)), _class));
exports.RedwoodCommandString = RedwoodCommandString;