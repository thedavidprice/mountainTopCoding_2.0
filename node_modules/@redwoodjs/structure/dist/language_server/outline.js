"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OutlineManager = void 0;

var _outline = require("../outline/outline");

var _decorators = require("../x/decorators");

var _vscode = require("../x/vscode");

var _dec, _class;

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

let OutlineManager = (_dec = (0, _decorators.memo)(), (_class = class OutlineManager {
  constructor(server) {
    this.server = server;
  }

  start() {
    const getRoot = () => {
      const p = this.server.getProject();

      if (!p) {
        return {
          async children() {
            return [{
              label: 'No Redwood.js project found...'
            }];
          }

        };
      }

      return (0, _outline.getOutline)(p);
    };

    const tdp = new _vscode.RemoteTreeDataProviderImpl(getRoot);
    const methodPrefix = 'redwoodjs/x-outline-';
    (0, _vscode.RemoteTreeDataProvider_publishOverLSPConnection)(tdp, this.server.connection, methodPrefix);
  }

}, (_applyDecoratedDescriptor(_class.prototype, "start", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "start"), _class.prototype)), _class));
exports.OutlineManager = OutlineManager;