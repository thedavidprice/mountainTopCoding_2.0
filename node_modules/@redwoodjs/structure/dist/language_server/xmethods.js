"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XMethodsManager = void 0;

var _decorators = require("../x/decorators");

var _dec, _class;

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

/**
 * A set of custom methods (not included in the LSP spec) exposed to the client
 * via the sendRequest/onRequest mechanism.
 */
let XMethodsManager = (_dec = (0, _decorators.memo)(), (_class = class XMethodsManager {
  constructor(server) {
    this.server = server;
  }

  start() {
    const {
      server
    } = this;
    const {
      connection
    } = server;
    connection.onRequest('redwoodjs/x-getInfo', async uri => {
      var _server$getProject;

      const node = await ((_server$getProject = server.getProject()) === null || _server$getProject === void 0 ? void 0 : _server$getProject.findNode(uri));

      if (!node) {
        return undefined;
      }

      return await node.collectIDEInfo();
    });
    connection.onRequest('redwoodjs/x-getFilePathForRoutePath', routePath => {
      var _server$getProject2;

      return (_server$getProject2 = server.getProject()) === null || _server$getProject2 === void 0 ? void 0 : _server$getProject2.router.getFilePathForRoutePath(routePath);
    });
    connection.onRequest('redwoodjs/x-getRoutePathForFilePath', uri => {
      var _server$getProject3;

      return (_server$getProject3 = server.getProject()) === null || _server$getProject3 === void 0 ? void 0 : _server$getProject3.router.getRoutePathForFilePath(uri);
    });
  }

}, (_applyDecoratedDescriptor(_class.prototype, "start", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, "start"), _class.prototype)), _class));
exports.XMethodsManager = XMethodsManager;