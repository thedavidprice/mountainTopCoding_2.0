"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.supabase = void 0;

const supabase = client => {
  return {
    type: 'supabase',
    client,
    login: async ({
      email,
      password,
      provider,
      refreshToken,
      redirectTo,
      scopes
    }) => {
      // if refreshToken then currentSession and currentUser will be updated
      // to latest on _callRefreshToken using the passed refreshToken
      if (refreshToken) {
        return await client.auth.signIn({
          refreshToken
        }, {
          redirectTo
        });
      } // magic link


      if (email && !password) {
        return await client.auth.signIn({
          email
        }, {
          redirectTo
        });
      } // email and password


      if (email && password) {
        return await client.auth.signIn({
          email,
          password
        }, {
          redirectTo
        });
      } // oauth, such as apple, twitter, github, gitlab, bitbucket, google, azure etc.


      if (provider) {
        return await client.auth.signIn({
          provider
        }, {
          redirectTo,
          scopes
        });
      }

      throw new Error(`You must provide either an email, third-party provider or a refreshToken.`);
    },
    logout: async () => {
      return await client.auth.signOut();
    },
    signup: async ({
      email,
      password,
      redirectTo
    }) => {
      return await client.auth.signUp({
        email,
        password
      }, {
        redirectTo
      });
    },
    getToken: async () => {
      const currentSession = client.auth.session();
      return (currentSession === null || currentSession === void 0 ? void 0 : currentSession.access_token) || null;
    },
    getUserMetadata: async () => {
      return await client.auth.user();
    },
    restoreAuthState: async () => {
      await client.auth.getSessionFromUrl();
      window.history.replaceState({}, document.title, window.location.pathname);
      return;
    }
  };
};

exports.supabase = supabase;