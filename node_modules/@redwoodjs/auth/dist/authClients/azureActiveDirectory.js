"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.azureActiveDirectory = void 0;

const azureActiveDirectory = client => {
  return {
    type: 'azureActiveDirectory',
    client,
    login: async options => await client.loginPopup(options),
    logout: options => client.logout(options),
    signup: async options => await client.loginPopup(options),
    getToken: async options => {
      const authRequest = options || {
        scopes: ['openid', 'profile']
      }; // The recommended call pattern is to first try to call AcquireTokenSilent,
      // and if it fails with a MsalUiRequiredException, call AcquireTokenXYZ
      // https://github.com/AzureAD/microsoft-authentication-library-for-dotnet/wiki/AcquireTokenSilentAsync-using-a-cached-token
      // NOTE: We are not catching by the `MsalUiRequiredException`, perhaps we can branch off `error.name`
      // if this strategy doesn't work properly.

      try {
        var _response$idToken;

        const response = await client.acquireTokenSilent(authRequest);
        return (response === null || response === void 0 ? void 0 : (_response$idToken = response.idToken) === null || _response$idToken === void 0 ? void 0 : _response$idToken.rawIdToken) || null;
      } catch (error) {
        client.acquireTokenRedirect(authRequest);
      }

      return null;
    },
    getUserMetadata: async () => (await client.getAccount()) || null
  };
};

exports.azureActiveDirectory = azureActiveDirectory;