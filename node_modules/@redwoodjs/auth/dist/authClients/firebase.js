"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.firebase = void 0;

// @TODO: Firebase doesn't export a list of providerIds they use
// But I found them here: https://github.com/firebase/firebase-js-sdk/blob/a5768b0aa7d7ce732279931aa436e988c9f36487/packages/rules-unit-testing/src/api/index.ts
const isPasswordCreds = withCreds => {
  const creds = withCreds;
  return creds.email !== undefined && creds.password !== undefined;
};

const firebase = client => {
  // Use a function to allow us to extend for non-oauth providers in the future
  const getProvider = providerId => {
    return new client.auth.OAuthProvider(providerId);
  };

  return {
    type: 'firebase',
    client,
    restoreAuthState: () => client.auth().getRedirectResult(),
    login: async (withAuth = 'google.com') => {
      if (isPasswordCreds(withAuth)) {
        return client.auth().signInWithEmailAndPassword(withAuth.email, withAuth.password);
      }

      const provider = getProvider(withAuth);
      return client.auth().signInWithPopup(provider);
    },
    logout: () => client.auth().signOut(),
    signup: async (withAuth = 'google.com') => {
      if (isPasswordCreds(withAuth)) {
        return client.auth().createUserWithEmailAndPassword(withAuth.email, withAuth.password);
      }

      const provider = getProvider(withAuth);
      return client.auth().signInWithPopup(provider);
    },
    getToken: async () => {
      var _client$auth$currentU, _client$auth$currentU2;

      return (_client$auth$currentU = (_client$auth$currentU2 = client.auth().currentUser) === null || _client$auth$currentU2 === void 0 ? void 0 : _client$auth$currentU2.getIdToken()) !== null && _client$auth$currentU !== void 0 ? _client$auth$currentU : null;
    },
    getUserMetadata: async () => client.auth().currentUser
  };
};

exports.firebase = firebase;