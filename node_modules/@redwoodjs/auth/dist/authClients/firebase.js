"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.firebase = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));

// @TODO: Firebase doesn't export a list of providerIds they use
// But I found them here: https://github.com/firebase/firebase-js-sdk/blob/a5768b0aa7d7ce732279931aa436e988c9f36487/packages/rules-unit-testing/src/api/index.ts
const isPasswordCreds = withCreds => {
  const creds = withCreds;
  return creds.email !== undefined && creds.password !== undefined;
};

const firebase = client => {
  // Use a function to allow us to extend for non-oauth providers in the future
  const getProvider = providerId => {
    return new client.auth.OAuthProvider(providerId);
  }; // Firebase auth functions return a goog.Promise which as of 2021-05-12 does
  // not appear to work with try {await} catch blocks as exceptions are not caught.
  // This client returns a new standard Promise so that the exceptions can be
  // caught and no changes are required in common auth code located in AuthProvider.tsx


  const repackagePromise = fireBasePromise => {
    return new _promise.default((resolve, reject) => {
      fireBasePromise.then(result => resolve(result)).catch(error => reject(error));
    });
  };

  return {
    type: 'firebase',
    client,
    restoreAuthState: () => repackagePromise(client.auth().getRedirectResult()),
    login: (withAuth = 'google.com') => {
      if (isPasswordCreds(withAuth)) {
        return repackagePromise(client.auth().signInWithEmailAndPassword(withAuth.email, withAuth.password));
      }

      const provider = getProvider(withAuth);
      return client.auth().signInWithPopup(provider);
    },
    logout: () => repackagePromise(client.auth().signOut()),
    signup: (withAuth = 'google.com') => {
      if (isPasswordCreds(withAuth)) {
        return repackagePromise(client.auth().createUserWithEmailAndPassword(withAuth.email, withAuth.password));
      }

      const provider = getProvider(withAuth);
      return repackagePromise(client.auth().signInWithPopup(provider));
    },
    getToken: () => {
      const currentUser = client.auth().currentUser;

      if (currentUser) {
        return repackagePromise(currentUser.getIdToken());
      }

      return new _promise.default(() => {
        return null;
      });
    },
    getUserMetadata: async () => client.auth().currentUser
  };
};

exports.firebase = firebase;