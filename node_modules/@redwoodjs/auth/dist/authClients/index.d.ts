import type { Auth0, Auth0User } from './auth0';
import type { AzureActiveDirectory, AzureActiveDirectoryUser } from './azureActiveDirectory';
import type { Clerk, ClerkUser } from './clerk';
import type { Custom } from './custom';
import type { DbAuth } from './dbAuth';
import type { Ethereum, EthereumUser } from './ethereum';
import type { Firebase } from './firebase';
import type { GoTrue, GoTrueUser } from './goTrue';
import type { MagicLink, MagicUser } from './magicLink';
import type { NetlifyIdentity } from './netlify';
import type { Nhost, NhostUser } from './nhost';
import type { Supabase, SupabaseUser } from './supabase';
declare const typesToClients: {
    netlify: (client: typeof import("netlify-identity-widget")) => AuthClient;
    auth0: (client: Auth0) => AuthClient;
    azureActiveDirectory: (client: AzureActiveDirectory) => AuthClient;
    dbAuth: () => AuthClient;
    goTrue: (client: GoTrue) => import("./goTrue").AuthClientGoTrue;
    magicLink: (client: import("@magic-sdk/provider").SDKBase & {
        [x: string]: Omit<import("magic-sdk").Extension<string>, "name" | "init" | "config" | "compat">;
    }) => import("./magicLink").AuthClientMagicLink;
    firebase: (client: typeof import("firebase").default) => AuthClient;
    supabase: (client: import("@supabase/supabase-js").SupabaseClient) => import("./supabase").AuthClientSupabase;
    ethereum: (client: Ethereum) => AuthClient;
    nhost: (client: import("nhost-js-sdk").NhostClient) => AuthClient;
    clerk: (client: any) => AuthClient;
    /** Don't we support your auth client? No problem, define your own the `custom` type! */
    custom: (authClient: import("./custom").AuthClientCustom) => import("./custom").AuthClientCustom;
};
export declare type SupportedAuthClients = Auth0 | AzureActiveDirectory | DbAuth | GoTrue | NetlifyIdentity | MagicLink | Firebase | Supabase | Clerk | Ethereum | Nhost | Custom;
export declare type SupportedAuthTypes = keyof typeof typesToClients;
export type { Auth0User };
export type { AzureActiveDirectoryUser };
export type { DbAuth };
export type { ClerkUser };
export type { GoTrueUser };
export type { MagicUser };
export type { SupabaseUser };
export type { EthereumUser };
export type { NhostUser };
export declare type SupportedUserMetadata = Auth0User | AzureActiveDirectoryUser | ClerkUser | GoTrueUser | MagicUser | SupabaseUser | EthereumUser | NhostUser;
export interface AuthClient {
    restoreAuthState?(): void | Promise<any>;
    login(options?: any): Promise<any>;
    logout(options?: any): void | Promise<any>;
    signup(options?: any): void | Promise<any>;
    getToken(): Promise<null | string>;
    /** The user's data from the AuthProvider */
    getUserMetadata(): Promise<null | SupportedUserMetadata>;
    client: SupportedAuthClients;
    type: SupportedAuthTypes;
}
export declare const createAuthClient: (client: SupportedAuthClients, type: SupportedAuthTypes) => AuthClient;
//# sourceMappingURL=index.d.ts.map