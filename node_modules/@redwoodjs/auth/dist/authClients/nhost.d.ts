import type { Session, NhostClient, User } from 'nhost-js-sdk';
export declare type Nhost = NhostClient;
export declare type NhostUser = User;
import { AuthClient } from "./index";
declare type NhostProvider = 'google' | 'github' | 'facebook' | 'linkedin';
export interface AuthClientNhost extends AuthClient {
    /**
     * Log In an existing user with email/password or via a OAuth provider
     * Log In via a OAuth provider also registers the account in case it doesn't exist
     * @param options.email The user's email address
     * @param options.password The user's password
     * @param options.provider One of NhostProvider
     */
    login(options: {
        email?: string;
        password?: string;
        provider?: NhostProvider;
    }): Promise<{
        session: Session | null;
        user: NhostUser | null;
        mfa?: {
            ticket: string;
        };
    }>;
    logout(): Promise<void>;
    /**
     * Creates a new user account
     * @param options.email The user's email address
     * @param options.password The user's password
     */
    signup(options: {
        email: string;
        password: string;
        registrationOptions?: {
            userData?: any;
            defaultRole?: string;
            allowedRoles?: string[];
        };
    }): Promise<{
        session: Session | null;
        user: User | null;
    }>;
    getToken(): Promise<string | null>;
    getUserMetadata(): Promise<NhostUser | null>;
    restoreAuthState(): Promise<{
        session: Session | null;
        user: NhostUser | null;
    }>;
    client: Nhost;
}
export declare const nhost: (client: Nhost) => AuthClient;
export {};
//# sourceMappingURL=nhost.d.ts.map