/// <reference types="react" />
import type { DocumentNode } from 'graphql';
import { OperationResult } from "./GraphQLHooksProvider";
export declare type DataObject = {
    [key: string]: unknown;
};
export declare type CellFailureStateComponent = Omit<OperationResult, 'data' | 'loading'>;
export declare type CellLoadingEmptyStateComponent = Omit<OperationResult, 'error' | 'loading' | 'data'>;
export declare type CellSuccessStateComponent = Omit<OperationResult, 'error' | 'loading' | 'data'> | DataObject;
export interface WithCellProps {
    beforeQuery?: <TProps>(props: TProps) => {
        variables: TProps;
    };
    QUERY: DocumentNode | ((variables: Record<string, unknown>) => DocumentNode);
    afterQuery?: (data: DataObject) => DataObject;
    Loading?: React.FC<CellLoadingEmptyStateComponent>;
    Failure?: React.FC<CellFailureStateComponent>;
    Empty?: React.FC<CellLoadingEmptyStateComponent>;
    Success: React.FC<CellSuccessStateComponent>;
}
export declare const withCell: ({ beforeQuery, QUERY, afterQuery, Loading, Failure, Empty, Success, }: WithCellProps) => (props: Record<string, unknown>) => JSX.Element;
//# sourceMappingURL=withCellHOC.d.ts.map