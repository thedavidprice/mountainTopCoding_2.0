/// <reference types="react" />
import type { DocumentNode } from 'graphql';
export interface GraphQLHookOptions {
    variables?: Record<string, any>;
    refetchQueries?: {
        query: DocumentNode;
        variables?: Record<string, any>;
    }[];
    onCompleted?: (data: any) => void;
    [key: string]: any;
}
export interface OperationResult<TData = any> {
    data?: TData;
    loading: boolean;
    error?: Error;
}
export declare type MutationOperationResult<TData = any> = [
    (options?: any) => Promise<TData>,
    OperationResult<TData>
];
export interface GraphQLHooks {
    useQuery: (query: DocumentNode, options?: GraphQLHookOptions) => OperationResult;
    useMutation: (mutation: DocumentNode, options?: GraphQLHookOptions) => MutationOperationResult;
}
export declare const GraphQLHooksContext: React.Context<GraphQLHooks>;
/**
 * GraphQLHooksProvider stores standard `useQuery` and `useMutation` hooks for Redwood
 * that can be mapped to your GraphQL library of choice's own `useQuery`
 * and `useMutation` implementation.
 *
 * @todo Let the user pass in the additional type for options.
 */
export declare const GraphQLHooksProvider: React.FunctionComponent<{
    useQuery: (query: DocumentNode, options?: GraphQLHookOptions) => OperationResult;
    useMutation: (mutation: DocumentNode, options?: GraphQLHookOptions) => MutationOperationResult;
}>;
export declare function useQuery<TData = any>(query: DocumentNode, options?: GraphQLHookOptions): OperationResult<TData>;
export declare function useMutation<TData = any>(mutation: DocumentNode, options?: GraphQLHookOptions): MutationOperationResult<TData>;
//# sourceMappingURL=GraphQLHooksProvider.d.ts.map