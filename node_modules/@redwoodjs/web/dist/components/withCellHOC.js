"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.withCell = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/is-array"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _GraphQLHooksProvider = require("./GraphQLHooksProvider");

const Query = ({
  children,
  query,
  ...rest
}) => {
  const result = (0, _GraphQLHooksProvider.useQuery)(query, rest);
  return result ? children(result) : null;
};

/**
 * Is a higher-order-component that executes a GraphQL query and automatically
 * manages the lifecycle of that query. If you export named parameters that match
 * the required params of `withCell` it will be automatically wrapped in this
 * HOC via a babel-plugin.
 *
 * @param {string} QUERY - The graphQL syntax tree to execute
 * @param {function=} beforeQuery - Prepare the variables and options for the query
 * @param {function=} afterQuery - Sanitize the data return from graphQL
 * @param {Component=} Loading - Loading, render this component
 * @param {Component=} Empty - Loading, render this component
 * @param {Component=} Failure - Something went wrong, render this component
 * @param {Component} Success - Data has loaded, render this component
 *
 * @example
 * ```js
 * // IMPLEMENTATION:
 * // `src/ExampleComponent/index.js`. This file is automatically dealt with
 * in webpack.
 *
 * import { withCell } from '@redwoodjs/web'
 * import * as cell from './ExampleComponent'
 *
 * export default withCell(cell)
 * ```
 *
 * // USAGE:
 * // Now you have a cell component that will handle the lifecycle methods of
 * // a query
 * import ExampleComponent from 'src/ExampleComponent'
 *
 * const ThingThatUsesExampleComponent = () => {
 *  return <div><ExampleComponent /></div>
 * }
 */
const isDataNull = data => {
  return dataField(data) === null;
};

const isDataEmptyArray = data => {
  const field = dataField(data);
  return (0, _isArray.default)(field) && field.length === 0;
};

const dataField = data => {
  return data[(0, _keys.default)(data)[0]];
};

const isEmpty = data => {
  return isDataNull(data) || isDataEmptyArray(data);
};

const withCell = ({
  beforeQuery = props => ({
    variables: props,
    fetchPolicy: 'cache-and-network',
    nextFetchPolicy: 'cache-first'
  }),
  QUERY,
  afterQuery = data => ({ ...data
  }),
  Loading = () => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Loading..."),
  Failure,
  Empty,
  Success
}) => {
  // If its prerendering, render the Cell's Loading component
  if (global.__REDWOOD__PRERENDERING) {
    return props => /*#__PURE__*/_react.default.createElement(Loading, props);
  }

  return props => {
    const {
      children,
      // eslint-disable-line @typescript-eslint/no-unused-vars
      ...variables
    } = props;
    return /*#__PURE__*/_react.default.createElement(Query, (0, _extends2.default)({
      query: typeof QUERY === 'function' ? QUERY(beforeQuery(variables)) : QUERY
    }, beforeQuery(variables)), ({
      error,
      loading,
      data,
      ...queryRest
    }) => {
      if (error) {
        if (Failure) {
          return /*#__PURE__*/_react.default.createElement(Failure, (0, _extends2.default)({
            error: error
          }, queryRest, props));
        } else {
          throw error;
        }
      } else if (loading) {
        return /*#__PURE__*/_react.default.createElement(Loading, (0, _extends2.default)({}, queryRest, props));
      } else if (data) {
        if (typeof Empty !== 'undefined' && isEmpty(data)) {
          return /*#__PURE__*/_react.default.createElement(Empty, (0, _extends2.default)({}, queryRest, props));
        } else {
          return /*#__PURE__*/_react.default.createElement(Success, (0, _extends2.default)({}, afterQuery(data), queryRest, props));
        }
      } else {
        throw new Error('Cannot render cell: GraphQL success but `data` is null');
      }
    });
  };
};

exports.withCell = withCell;