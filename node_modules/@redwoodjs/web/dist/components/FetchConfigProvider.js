"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.useFetchConfig = exports.FetchConfigProvider = exports.FetchConfigContext = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

const FetchConfigContext = _react.default.createContext({
  uri: `${global.__REDWOOD__API_PROXY_PATH}/graphql`
});
/**
 * The `FetchConfigProvider` understands Redwood's Auth and determines the
 * correct request-headers based on a user's authentication state.
 */


exports.FetchConfigContext = FetchConfigContext;

const FetchConfigProvider = ({
  useAuth = (() => {
    var _global$__REDWOOD__US;

    return (_global$__REDWOOD__US = global.__REDWOOD__USE_AUTH) !== null && _global$__REDWOOD__US !== void 0 ? _global$__REDWOOD__US : () => ({
      loading: false,
      isAuthenticated: false
    });
  })(),
  ...rest
}) => {
  const {
    isAuthenticated,
    authToken,
    type
  } = useAuth(); // Even though the user may be authenticated and we may require `authToken` to continue
  // This should be handled by the `Private` route.

  if (!isAuthenticated || !authToken) {
    return /*#__PURE__*/_react.default.createElement(FetchConfigContext.Provider, (0, _extends2.default)({
      value: {
        uri: `${global.__REDWOOD__API_PROXY_PATH}/graphql`
      }
    }, rest));
  }

  return /*#__PURE__*/_react.default.createElement(FetchConfigContext.Provider, (0, _extends2.default)({
    value: {
      uri: `${global.__REDWOOD__API_PROXY_PATH}/graphql`,
      headers: {
        'auth-provider': type,
        authorization: `Bearer ${authToken}`
      }
    }
  }, rest));
};

exports.FetchConfigProvider = FetchConfigProvider;

const useFetchConfig = () => _react.default.useContext(FetchConfigContext);

exports.useFetchConfig = useFetchConfig;