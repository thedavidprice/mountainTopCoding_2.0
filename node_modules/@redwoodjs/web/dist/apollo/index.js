"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.RedwoodApolloProvider = void 0;

var _react = _interopRequireDefault(require("react"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/concat"));

var _client = require("@apollo/client");

var _context = require("@apollo/client/link/context");

var _auth = require("@redwoodjs/auth");

require("./typeOverride");

var _FetchConfigProvider = require("../components/FetchConfigProvider");

var _GraphQLHooksProvider = require("../components/GraphQLHooksProvider");

const ApolloProviderWithFetchConfig = ({
  config = {},
  children,
  useAuth
}) => {
  const {
    uri,
    headers
  } = (0, _FetchConfigProvider.useFetchConfig)();
  const {
    getToken,
    type: authProviderType,
    isAuthenticated
  } = useAuth();
  const withToken = (0, _context.setContext)(async () => {
    if (isAuthenticated && getToken) {
      const token = await getToken();
      return {
        token
      };
    }

    return {
      token: null
    };
  });
  const authMiddleware = new _client.ApolloLink((operation, forward) => {
    const {
      token
    } = operation.getContext(); // Only add auth headers when token is present
    // Token is null, when !isAuthenticated

    const authHeaders = token ? {
      'auth-provider': authProviderType,
      authorization: `Bearer ${token}`
    } : {};
    operation.setContext(() => ({
      headers: { ...headers,
        // Duped auth headers, because we may remove FetchContext at a later date
        ...authHeaders
      }
    }));
    return forward(operation);
  });
  const httpLink = (0, _client.createHttpLink)({
    uri
  });
  const client = new _client.ApolloClient({
    cache: new _client.InMemoryCache(),
    ...config,
    link: _client.ApolloLink.from([withToken, (0, _concat.default)(authMiddleware).call(authMiddleware, httpLink)])
  });
  return /*#__PURE__*/_react.default.createElement(_client.ApolloProvider, {
    client: client
  }, children);
};

const RedwoodApolloProvider = ({
  graphQLClientConfig,
  useAuth = _auth.useAuth,
  children
}) => {
  return /*#__PURE__*/_react.default.createElement(_FetchConfigProvider.FetchConfigProvider, {
    useAuth: useAuth
  }, /*#__PURE__*/_react.default.createElement(ApolloProviderWithFetchConfig, {
    config: graphQLClientConfig,
    useAuth: useAuth
  }, /*#__PURE__*/_react.default.createElement(_GraphQLHooksProvider.GraphQLHooksProvider, {
    useQuery: _client.useQuery,
    useMutation: _client.useMutation
  }, children)));
};

exports.RedwoodApolloProvider = RedwoodApolloProvider;