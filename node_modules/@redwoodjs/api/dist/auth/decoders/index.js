"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.decodeToken = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _auth = require("./auth0");

var _azureActiveDirectory = require("./azureActiveDirectory");

var _ethereum = require("./ethereum");

var _netlify = require("./netlify");

var _nhost = require("./nhost");

var _supabase = require("./supabase");

const noop = token => token;

const typesToDecoders = {
  auth0: _auth.auth0,
  azureActiveDirectory: _azureActiveDirectory.azureActiveDirectory,
  netlify: _netlify.netlify,
  nhost: _nhost.nhost,
  goTrue: _netlify.netlify,
  magicLink: noop,
  firebase: noop,
  supabase: _supabase.supabase,
  ethereum: _ethereum.ethereum,
  custom: noop
};

const decodeToken = async (type, token, req) => {
  if (!typesToDecoders[type]) {
    // Make this a warning, instead of a hard error
    // Allow users to have multiple custom types if they choose to
    if (process.env.NODE_ENV === 'development') {
      console.warn(`The auth type "${type}" is not officially supported, we currently support: ${(0, _keys.default)(typesToDecoders).join(', ')}`);
      console.warn('Please ensure you have handlers for your custom auth in getCurrentUser in src/lib/auth.{js,ts}');
    }
  }

  const decoder = typesToDecoders[type] || noop;
  return decoder(token, req);
};

exports.decodeToken = decodeToken;