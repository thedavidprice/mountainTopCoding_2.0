"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getAuthenticationContext = exports.parseAuthorizationHeader = exports.getAuthProviderHeader = void 0;

var _decoders = require("./decoders");

// This is shared by `@redwoodjs/web`
const AUTH_PROVIDER_HEADER = 'auth-provider';

const getAuthProviderHeader = event => {
  return event === null || event === void 0 ? void 0 : event.headers[AUTH_PROVIDER_HEADER];
};

exports.getAuthProviderHeader = getAuthProviderHeader;

/**
 * Split the `Authorization` header into a schema and token part.
 */
const parseAuthorizationHeader = event => {
  var _event$headers, _event$headers$author;

  const parts = (_event$headers = event.headers) === null || _event$headers === void 0 ? void 0 : (_event$headers$author = _event$headers.authorization) === null || _event$headers$author === void 0 ? void 0 : _event$headers$author.split(' ');

  if ((parts === null || parts === void 0 ? void 0 : parts.length) !== 2) {
    throw new Error('The `Authorization` header is not valid.');
  }

  const [schema, token] = parts;

  if (!schema.length || !token.length) {
    throw new Error('The `Authorization` header is not valid.');
  }

  return {
    schema,
    token
  };
};

exports.parseAuthorizationHeader = parseAuthorizationHeader;

/**
 * Get the authorization information from the request headers and request context.
 * @returns [decoded, { type, schema, token }, { event, context }]
 **/
const getAuthenticationContext = async ({
  event,
  context
}) => {
  const type = getAuthProviderHeader(event); // No `auth-provider` header means that the user is logged out,
  // and none of this is auth malarky is required.

  if (!type) {
    return undefined;
  }

  let decoded = null;
  const {
    schema,
    token
  } = parseAuthorizationHeader(event);
  decoded = await (0, _decoders.decodeToken)(type, token, {
    event,
    context
  });
  return [decoded, {
    type,
    schema,
    token
  }, {
    event,
    context
  }];
};

exports.getAuthenticationContext = getAuthenticationContext;