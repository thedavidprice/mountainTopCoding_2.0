"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.makeServices = void 0;

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/entries"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _beforeResolverSpec = require("./beforeResolverSpec");

const makeServices = ({
  services
}) => {
  if (process.env.REDWOOD_SECURE_SERVICES !== '1') {
    console.warn('NOTICE: Redwood v1.0 will make resolvers secure by default.');
    console.warn('To opt in to this behavior now, add `REDWOOD_SECURE_SERVICES=1` to your `.env.defaults` file. For more information: https://redwoodjs.com/docs/services');
    return services;
  }

  const servicesCollection = {};

  for (const [name, resolvers] of (0, _entries.default)(services)) {
    if (!(resolvers !== null && resolvers !== void 0 && resolvers.beforeResolver)) {
      throw new _beforeResolverSpec.MissingBeforeResolverError(name);
    }

    const spec = new _beforeResolverSpec.BeforeResolverSpec((0, _keys.default)(resolvers));
    resolvers.beforeResolver(spec);
    const exportResolvers = {};

    for (const [resolverName, resolverFunc] of (0, _entries.default)(resolvers)) {
      if (resolverName === 'beforeResolver') {
        continue;
      }

      if (typeof resolverFunc === 'function') {
        // wrap resolver function in spec verification
        exportResolvers[resolverName] = (...args) => {
          spec.verify(resolverName, args);
          return resolverFunc(...args);
        };
      } else {
        // resolver is just a sub-type, like posts.comments
        exportResolvers[resolverName] = resolverFunc;
      }
    }

    servicesCollection[name] = exportResolvers;
  }

  return servicesCollection;
};

exports.makeServices = makeServices;