import type { Context, ContextFunction } from 'apollo-server-core';
import type { Config, CreateHandlerOptions } from 'apollo-server-lambda';
import type { APIGatewayProxyEvent, Context as LambdaContext } from 'aws-lambda';
import type { AuthContextPayload } from "../auth";
import { GlobalContext } from "../globalContext";
export declare type GetCurrentUser = (decoded: AuthContextPayload[0], raw: AuthContextPayload[1], req?: AuthContextPayload[2]) => Promise<null | Record<string, unknown> | string>;
/**
 * We use Apollo Server's `context` option as an entry point to construct our
 * own global context.
 *
 * Context explained by Apollo's Docs:
 * Context is an object shared by all resolvers in a particular query,
 * and is used to contain per-request state, including authentication information,
 * dataloader instances, and anything else that should be taken into account when
 * resolving the query.
 */
export declare const createContextHandler: (userContext?: object | ContextFunction<any, object> | undefined, getCurrentUser?: GetCurrentUser | undefined) => ({ event, context, }: {
    event: APIGatewayProxyEvent;
    context: GlobalContext & LambdaContext;
}) => Promise<GlobalContext>;
interface GraphQLHandlerOptions extends Config {
    /**
     * Modify the resolver and global context.
     */
    context?: Context | ContextFunction;
    /**
     * An async function that maps the auth token retrieved from the request headers to an object.
     * Is it executed when the `auth-provider` contains one of the supported providers.
     */
    getCurrentUser?: GetCurrentUser;
    /**
     * A callback when an unhandled exception occurs. Use this to disconnect your prisma instance.
     */
    onException?: () => void;
    cors?: CreateHandlerOptions['cors'];
    onHealthCheck?: CreateHandlerOptions['onHealthCheck'];
}
/**
 * Creates an Apollo GraphQL Server.
 *
 * ```js
 * export const handler = createGraphQLHandler({ schema, context, getCurrentUser })
 * ```
 */
export declare const createGraphQLHandler: ({ context, getCurrentUser, onException, cors, onHealthCheck, ...options }?: GraphQLHandlerOptions) => (event: APIGatewayProxyEvent, context: LambdaContext, callback: any) => void;
export {};
//# sourceMappingURL=graphql.d.ts.map