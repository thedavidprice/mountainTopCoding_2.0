"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.builder = exports.description = exports.command = void 0;

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/slice"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reduce"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _startsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/starts-with"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/from"));

var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/set"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _boxen = _interopRequireDefault(require("boxen"));

var _execa = _interopRequireDefault(require("execa"));

var _internal = require("@redwoodjs/internal");

var _colors = _interopRequireDefault(require("../lib/colors"));

const command = 'prisma [commands..]';
exports.command = command;
const description = 'Run Prisma CLI with experimental features';
/**
 * This is a lightweight wrapper around Prisma's CLI.
 *
 * In order to test this command you can do the following:
 * 0. cd __fixtures__/example-todo-main && yarn install
 * 1. cd..; yarn build:watch
 * 2. cd packages/cli
 * 3. __REDWOOD__CONFIG_PATH=../../__fixtures__/example-todo-main yarn node dist/index.js prisma <test commands>
 */

exports.description = description;

const builder = async yargs => {
  var _context, _context2, _context3;

  // accept either help or --help, which is the same behavior as all the other RW Yargs commands.
  const argv = mapHelpCommandToFlag((0, _slice.default)(_context = process.argv).call(_context, 3)); // We dynamically create the `--options` that are passed to this command.
  // TODO: Figure out if there's a way to turn off yargs parsing.

  const options = (0, _reduce.default)(_context2 = (0, _map.default)(_context3 = (0, _filter.default)(argv).call(argv, x => (0, _startsWith.default)(x).call(x, '--'))).call(_context3, x => x.substr(2))).call(_context2, (pv, cv) => {
    return { ...pv,
      [cv]: {}
    };
  }, {});
  yargs.help(false).version(false).option(options).option('version', {
    alias: 'v'
  });
  const paths = (0, _internal.getPaths)();
  const autoFlags = [];
  const hasHelpFlag = (0, _some.default)(argv).call(argv, arg => (0, _includes.default)(arg).call(arg, '--help') || (0, _includes.default)(arg).call(arg, '-h')); // Only pass auto flags, when not running help

  if (!hasHelpFlag) {
    var _context4, _context5;

    if ((0, _includes.default)(_context4 = ['push', 'seed']).call(_context4, argv[1])) {
      // this is safe as is if a user also adds --preview-feature
      autoFlags.push('--preview-feature');
    }

    if ( // `introspect` to be replaced by `db pull`; still valid as of prisma@2.19
    (0, _includes.default)(_context5 = ['generate', 'introspect', 'db', 'migrate', 'studio', 'format']).call(_context5, argv[0])) {
      if (!_fs.default.existsSync(paths.api.dbSchema)) {
        console.error(_colors.default.error('\n Cannot run command. No Prisma Schema found.\n'));
        process.exit(1);
      }

      autoFlags.push('--schema', `"${paths.api.dbSchema}"`);
    }
  } // Set prevents duplicate flags


  const args = (0, _from.default)(new _set.default([...argv, ...autoFlags]));
  console.log(_colors.default.green(`\nRunning Prisma CLI:\n`) + `yarn prisma ${args.join(' ')} \n`);

  try {
    var _prismaCommand$stdout, _prismaCommand$stderr;

    const prismaCommand = (0, _execa.default)(`"${_path.default.join(paths.base, 'node_modules/.bin/prisma')}"`, args, {
      shell: true,
      cwd: paths.api.base,
      extendEnv: true,
      cleanup: true,
      stdio: 'inherit'
    });
    (_prismaCommand$stdout = prismaCommand.stdout) === null || _prismaCommand$stdout === void 0 ? void 0 : _prismaCommand$stdout.pipe(process.stdout);
    (_prismaCommand$stderr = prismaCommand.stderr) === null || _prismaCommand$stderr === void 0 ? void 0 : _prismaCommand$stderr.pipe(process.stderr); // So we can check for yarn prisma in the output
    // e.g. yarn prisma db pull

    const {
      stdout
    } = await prismaCommand;

    if (hasHelpFlag || stdout !== null && stdout !== void 0 && stdout.match('yarn prisma')) {
      printRwWrapperInfo();
    }
  } catch (e) {
    process.exit((e === null || e === void 0 ? void 0 : e.exitCode) || 1);
  }
};

exports.builder = builder;

const mapHelpCommandToFlag = argv => {
  return (0, _some.default)(argv).call(argv, x => (0, _includes.default)(x).call(x, 'help')) ? [...(0, _filter.default)(argv).call(argv, x => {
    var _context6, _context7;

    return !(0, _includes.default)(_context6 = ['--help']).call(_context6, x) && !(0, _includes.default)(_context7 = ['help']).call(_context7, x);
  }), '--help'] : argv;
};

const printRwWrapperInfo = () => {
  const message = `
  ${_colors.default.bold('ü¶∫ Redwood CLI Tip')}\n
     Use 'redwood prisma' to automatically pass the options
     '--schema=[path]' and '--preview-feature'. For example:\n
     ${_colors.default.green('yarn redwood prisma [command]')}\n
  üîç Redwood Doc: ${_colors.default.underline('https://redwoodjs.com/docs/cli-commands#prisma')}
  `;
  console.log((0, _boxen.default)(message, {
    padding: {
      top: 0,
      bottom: 0,
      right: 1,
      left: 1
    },
    margin: 1,
    borderColor: 'gray'
  }));
};