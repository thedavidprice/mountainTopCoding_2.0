"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.description = exports.command = void 0;

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _execa = _interopRequireDefault(require("execa"));

var _listr = _interopRequireDefault(require("listr"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _lib = require("../lib");

var _colors = _interopRequireDefault(require("../lib/colors"));

var _generatePrismaClient = require("../lib/generatePrismaClient");

const command = 'upgrade';
exports.command = command;
const description = 'Upgrade all @redwoodjs packages via interactive CLI';
exports.description = description;

const builder = yargs => {
  yargs.example('rw upgrade -t 0.20.1-canary.5', 'Specify a version. URL for Version History:\nhttps://www.npmjs.com/package/@redwoodjs/core').option('dry-run', {
    alias: 'd',
    description: 'Check for outdated packages without upgrading',
    type: 'boolean'
  }).option('tag', {
    alias: 't',
    description: '[choices: "canary", "rc", or specific-version (see example below)] WARNING: "canary" and "rc" tags are unstable releases!',
    requiresArg: true,
    type: 'string',
    coerce: validateTag
  }).option('pr', {
    description: 'Installs packages for the given PR',
    requiresArg: true,
    type: 'string'
  }).conflicts('tag', 'pr').epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/reference/command-line-interface#upgrade')}`) // Just to make an empty line
  .epilogue('').epilogue(`We are < v1.0.0, so breaking changes occur frequently. For more information on the current release, see the ${(0, _terminalLink.default)('release page', 'https://github.com/redwoodjs/redwood/releases')}`);
};

exports.builder = builder;
const rwPackages = ['@redwoodjs/core', '@redwoodjs/api', '@redwoodjs/web', '@redwoodjs/router', '@redwoodjs/auth', '@redwoodjs/forms', '@redwoodjs/api-server'].join(' '); // yarn upgrade-interactive does not allow --tags, so we resort to this mess
// @redwoodjs/auth may not be installed so we add check

const installTags = (tag, isAuth) => {
  const mainString = `yarn upgrade @redwoodjs/core@${tag} \
  && yarn workspace api upgrade @redwoodjs/api@${tag} @redwoodjs/api-server@${tag} \
  && yarn workspace web upgrade @redwoodjs/web@${tag} @redwoodjs/router@${tag} @redwoodjs/forms@${tag}`;
  const authString = ` @redwoodjs/auth@${tag}`;

  if (isAuth) {
    return mainString + authString;
  } else {
    return mainString;
  }
};
/** `pr` example: 1454:0.21.0-d3b0abd */


const installPr = (pr, isAuth) => {
  const packageUrl = pkg => {
    const baseUrl = 'https://rw-pr-redwoodjs-com.s3.amazonaws.com/';
    const [prNbr, vSha] = pr.split(':');
    return `${baseUrl}${prNbr}/redwoodjs-${pkg}-${vSha}.tgz`;
  };

  const mainString = `yarn add -DW ${packageUrl('core')} ${packageUrl('cli')} ` + `&& yarn workspace api add ${packageUrl('api')} ` + `${packageUrl('api-server')} ` + `&& yarn workspace web add ${packageUrl('web')} ` + `${packageUrl('router')} ${packageUrl('forms')}`;
  const authString = ` ${packageUrl('auth')}`;

  if (isAuth) {
    return mainString + authString;
  } else {
    return mainString;
  }
};

const refreshPrismaClient = () => {
  /** Relates to prisma/client issue, @see: https://github.com/redwoodjs/redwood/issues/1083 */
  return [{
    title: '...',
    task: async (_ctx, task) => {
      try {
        await (0, _generatePrismaClient.generatePrismaClient)({
          verbose: false,
          force: false,
          schema: (0, _lib.getPaths)().api.dbSchema
        });
      } catch (e) {
        task.skip('Refreshing the Prisma client caused an Error.');
        console.log('You may need to update your prisma client manually: $ yarn rw prisma generate');
        console.log(_colors.default.error(e.message));
      }
    }
  }];
};

const checkInstalled = () => {
  const basePath = (0, _lib.getPaths)().base;
  return [{
    // yarn upgrade will install listed packages even if not already installed
    // this is a workaround to check for Auth install and then add to options if true
    // TODO: this will not support cases where api/ or web/ do not exist;
    // need to build a list of installed and use reference object to map commands
    title: '...',
    task: async (ctx, task) => {
      try {
        const {
          stdout
        } = await _execa.default.command('yarn list --depth 0 --pattern @redwoodjs/auth', {
          cwd: basePath
        });

        if ((0, _includes.default)(stdout).call(stdout, 'redwoodjs/auth')) {
          ctx.auth = true;
          task.title = 'Found @redwoodjs/auth';
        } else {
          task.title = 'Done';
        }
      } catch (e) {
        task.skip('"yarn list ..." caused an Error');
        console.log(_colors.default.error(e.message));
      }
    }
  }];
}; // yargs allows passing the 'dry-run' alias 'd' here,
// which we need to use because babel fails on 'dry-run'


const runUpgrade = ({
  d: dryRun,
  tag,
  pr
}) => {
  const basePath = (0, _lib.getPaths)().base;
  return [{
    title: '...',
    task: (ctx, task) => {
      if (dryRun) {
        task.title = tag || pr ? 'The --dry-run option is not supported for --tag or --pr' : 'Checking available upgrades for @redwoodjs packages'; // 'yarn outdated --scope @redwoodjs' will include netlify plugin
        // so we have to use hardcoded list,
        // which will NOT display info for uninstalled packages

        if (!tag) {
          _execa.default.command(`yarn outdated ${rwPackages}`, {
            stdio: 'inherit',
            cwd: basePath
          });
        } else {
          throw new Error();
        } // using @tag with workspaces limits us to use 'upgrade' with full list

      } else if (tag) {
        task.title = `Force upgrading @redwoodjs packages to latest ${tag} release`;

        _execa.default.command(installTags(tag, ctx.auth), {
          stdio: 'inherit',
          shell: true,
          cwd: basePath
        });
      } else if (pr) {
        task.title = `Installs packages from PR ${pr}`;

        _execa.default.command(installPr(pr, ctx.auth), {
          stdio: 'inherit',
          shell: true,
          cwd: basePath
        });
      } else {
        task.title = 'Running @redwoodjs package interactive upgrade CLI';
        (0, _execa.default)('yarn upgrade-interactive', ['--scope @redwoodjs', '--latest'], {
          stdio: 'inherit',
          shell: true,
          cwd: basePath
        });
      }
    }
  }];
};

const SEMVER_REGEX = /(?<=^v?|\sv?)(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:-(?:0|[1-9]\d*|[\da-z-]*[a-z-][\da-z-]*)(?:\.(?:0|[1-9]\d*|[\da-z-]*[a-z-][\da-z-]*))*)?(?:\+[\da-z-]+(?:\.[\da-z-]+)*)?(?=$|\s)/gi;

const validateTag = tag => {
  const isTagValid = tag === 'rc' || tag === 'canary' || tag === 'latest' || SEMVER_REGEX.test(tag);

  if (!isTagValid) {
    // Stop execution
    throw new Error(_colors.default.error('Invalid tag supplied. Supported values: rc, canary, latest, or valid semver version\n'));
  }

  return tag;
};

const handler = async ({
  d,
  tag,
  pr
}) => {
  // structuring as nested tasks to avoid bug with task.title causing duplicates
  const tasks = new _listr.default([{
    title: 'Checking installed packages',
    task: () => new _listr.default(checkInstalled())
  }, {
    title: 'Running upgrade command',
    task: () => new _listr.default(runUpgrade({
      d,
      tag,
      pr
    }))
  }, {
    title: 'Refreshing the Prisma client',
    task: () => new _listr.default(refreshPrismaClient())
  }], {
    collapse: false
  });

  try {
    await tasks.run();
  } catch (e) {
    console.error(_colors.default.error(e.message));
    process.exit((e === null || e === void 0 ? void 0 : e.exitCode) || 1);
  }
};

exports.handler = handler;