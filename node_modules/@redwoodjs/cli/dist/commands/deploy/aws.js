"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.description = exports.command = void 0;

require("core-js/modules/esnext.weak-map.delete-all.js");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _execa = _interopRequireDefault(require("execa"));

var _listr = _interopRequireDefault(require("listr"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _lib = require("../../lib");

var _colors = _interopRequireDefault(require("../../lib/colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const command = 'aws [provider]';
exports.command = command;
const description = 'Deploy to AWS using the selected provider';
exports.description = description;

const builder = yargs => {
  const SUPPORTED_PROVIDERS = _fs.default.readdirSync(_path.default.resolve(__dirname, 'aws-providers')).map(file => _path.default.basename(file, '.js')).filter(file => file !== 'README.md');

  yargs.positional('provider', {
    choices: SUPPORTED_PROVIDERS,
    default: 'serverless',
    description: 'AWS Deploy provider to configure',
    type: 'string'
  }).option('side', {
    describe: 'which Side(s) to deploy',
    choices: ['api'],
    default: 'api',
    type: 'array'
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/docs/cli-commands#deploy')}\n`);
};

exports.builder = builder;

const handler = async ({
  provider
}) => {
  const BASE_DIR = (0, _lib.getPaths)().base;
  const providerData = await Promise.resolve(`./aws-providers/${provider}`).then(s => _interopRequireWildcard(require(s)));
  const tasks = new _listr.default([providerData.preRequisites && providerData.preRequisites.length > 0 && {
    title: 'Checking pre-requisites',
    task: () => new _listr.default(providerData.preRequisites.map(preReq => {
      return {
        title: preReq.title,
        task: async () => {
          try {
            await (0, _execa.default)(...preReq.command);
          } catch (error) {
            error.message = error.message + '\n' + preReq.errorMessage.join(' ');
            throw error;
          }
        }
      };
    }))
  }, {
    title: 'Building and Packaging...',
    task: () => new _listr.default(providerData.buildCommands.map(commandDetail => {
      return {
        title: commandDetail.title,
        task: async () => {
          await (0, _execa.default)(...commandDetail.command, {
            cwd: BASE_DIR
          });
        }
      };
    }), {
      collapse: false
    })
  }].filter(Boolean), {
    collapse: false
  });

  try {
    await tasks.run();
    console.log(_colors.default.green(providerData.deployCommand.title));
    const deploy = (0, _execa.default)(...providerData.deployCommand.command, {
      cwd: BASE_DIR
    });
    deploy.stdout.pipe(process.stdout);
    await deploy;
  } catch (e) {
    console.log(_colors.default.error(e.message));
    process.exit(1);
  }
};

exports.handler = handler;