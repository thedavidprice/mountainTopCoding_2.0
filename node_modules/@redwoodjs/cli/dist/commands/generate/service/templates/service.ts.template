<% if (crud || relations.length > 0) { %>import { Prisma } from '@prisma/client'
<% } %><% if (relations.length) { %>import { ResolverArgs } from '@redwoodjs/api/dist/types'
<% } %>import { db } from 'src/lib/db'

export const ${pluralCamelName} = () => {
  return db.${singularCamelName}.findMany()
}<% if (crud) { %>

export const ${singularCamelName} = ({ id }: Prisma.${singularPascalName}WhereUniqueInput) => {
  return db.${singularCamelName}.findUnique({
    where: { id },
  })
}

interface Create${singularPascalName}Args {
  input: Prisma.${singularPascalName}CreateInput
}

export const create${singularPascalName} = ({ input }: Create${singularPascalName}Args) => {
  return db.${singularCamelName}.create({
    data: input,
  })
}

interface Update${singularPascalName}Args {
  where: Prisma.${singularPascalName}WhereUniqueInput
  input: Prisma.${singularPascalName}UpdateInput
}

export const update${singularPascalName} = ({ id, input }: Update${singularPascalName}Args) => {
  return db.${singularCamelName}.update({
    data: input,
    where: { id },
  })
}

export const delete${singularPascalName} = ({ id }: Prisma.${singularPascalName}WhereUniqueInput) => {
  return db.${singularCamelName}.delete({
    where: { id },
  })
}<% } %><% if (relations.length) { %>

export const ${singularPascalName} = {<% relations.forEach(relation => { %>
  ${relation}: (_obj, { root }: ResolverArgs<Prisma.${singularPascalName}WhereUniqueInput>) => db.${singularCamelName}.findUnique({ where: { id: root.id } }).${relation}(),<% }) %>
}<% } %>
