import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import ${singularPascalName}Form from 'src/components/${pascalScaffoldPath}${singularPascalName}Form'

export const QUERY = gql`
  query FIND_${singularConstantName}_BY_ID($id: ${idType}!) {
    ${singularCamelName}: ${singularCamelName}(id: $id) {<% columns.forEach(column => { %>
      <%= column.name %><% }) %>
    }
  }
`
const UPDATE_${singularConstantName}_MUTATION = gql`
  mutation Update${singularPascalName}Mutation($id: ${idType}!, $input: Update${singularPascalName}Input!) {
    update${singularPascalName}(id: $id, input: $input) {<% columns.forEach(column => { %>
      <%= column.name %><% }) %>
    }
  }
`

export const Loading = () => <div>Loading...</div>

export const Success = ({ ${singularCamelName} }) => {
  const [update${singularPascalName}, { loading, error }] = useMutation(UPDATE_${singularConstantName}_MUTATION, {
    onCompleted: () => {
      toast.success('${singularPascalName} updated')
      navigate(routes.${pluralRouteName}())
    },
  })

  const onSave = (input, id) => {<% if (intForeignKeys.length) { %>
    const castInput = Object.assign(input, { <% intForeignKeys.forEach(key => { %>${key}: parseInt(input.${key}), <% }) %>})<% } %>
    update${singularPascalName}({ variables: { id, <% if (intForeignKeys.length) { %>input: castInput<% } else { %>input<% } %> } })
  }

  return (
    <div className="rw-segment">
      <header className="rw-segment-header">
        <h2 className="rw-heading rw-heading-secondary">Edit ${singularPascalName} {${singularCamelName}.id}</h2>
      </header>
      <div className="rw-segment-main">
        <${singularPascalName}Form ${singularCamelName}={${singularCamelName}} onSave={onSave} error={error} loading={loading} />
      </div>
    </div>
  )
}
