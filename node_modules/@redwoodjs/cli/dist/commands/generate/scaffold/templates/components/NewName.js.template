import { useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import ${singularPascalName}Form from 'src/components/${pascalScaffoldPath}${singularPascalName}Form'

import { QUERY } from 'src/components/${pascalScaffoldPath}${pluralPascalName}Cell'

const CREATE_${singularConstantName}_MUTATION = gql`
  mutation Create${singularPascalName}Mutation($input: Create${singularPascalName}Input!) {
    create${singularPascalName}(input: $input) {
      id
    }
  }
`

const New${singularPascalName} = () => {
  const [create${singularPascalName}, { loading, error }] = useMutation(CREATE_${singularConstantName}_MUTATION, {
    onCompleted: () => {
      toast.success('${singularPascalName} created')
      navigate(routes.${pluralRouteName}())
    },
  })

  const onSave = (input) => {<% if (intForeignKeys.length) { %>
    const castInput = Object.assign(input, { <% intForeignKeys.forEach(key => { %>${key}: parseInt(input.${key}), <% }) %>})<% } %>
    create${singularPascalName}({ variables: { <% if (intForeignKeys.length) { %>input: castInput<% } else { %>input<% } %> } })
  }

  return (
    <div className="rw-segment">
      <header className="rw-segment-header">
        <h2 className="rw-heading rw-heading-secondary">New ${singularPascalName}</h2>
      </header>
      <div className="rw-segment-main">
        <${singularPascalName}Form onSave={onSave} loading={loading} error={error} />
      </div>
    </div>
  )
}

export default New${singularPascalName}
