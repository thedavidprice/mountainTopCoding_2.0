"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.builder = exports.description = exports.command = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _chalk = _interopRequireDefault(require("chalk"));

var _execa = _interopRequireDefault(require("execa"));

var _listr = _interopRequireDefault(require("listr"));

var _lib = require("../../../lib");

var _colors = _interopRequireDefault(require("../../../lib/colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const command = 'tailwind';
exports.command = command;
const description = 'Setup tailwindcss and PostCSS';
exports.description = description;

const builder = yargs => {
  yargs.option('force', {
    alias: 'f',
    default: false,
    description: 'Overwrite existing configuration',
    type: 'boolean'
  });
  yargs.option('install', {
    alias: 'i',
    default: true,
    description: 'Install packages',
    type: 'boolean'
  });
};

exports.builder = builder;
const tailwindImports = ['@import "tailwindcss/base";', '@import "tailwindcss/components";', '@import "tailwindcss/utilities";'];

const tailwindImportsExist = indexCSS => tailwindImports.map(el => new RegExp(el)).every(tailwindDirective => tailwindDirective.test(indexCSS));

const tailwindImportsAndNotes = ['/**', ' * START --- TAILWIND GENERATOR EDIT', ' *', ' * `yarn rw setup tailwind` placed these imports here', " * to inject Tailwind's styles into your CSS.", ' * For more information, see: https://tailwindcss.com/docs/installation#add-tailwind-to-your-css', ' */', ...tailwindImports, '/**', ' * END --- TAILWIND GENERATOR EDIT', ' */\n'];

const handler = async ({
  force,
  install
}) => {
  const tasks = new _listr.default([{
    title: 'Installing packages...',
    skip: () => !install,
    task: () => {
      return new _listr.default([{
        title: 'Install postcss, postcss-loader, tailwindcss, and autoprefixer',
        task: async () => {
          await (0, _execa.default)('yarn', ['workspace', 'web', 'add', '-D', 'postcss', 'postcss-loader', 'tailwindcss', 'autoprefixer']);
        }
      }]);
    }
  }, {
    title: 'Configuring PostCSS...',
    task: () => {
      /**
       * Make web/config if it doesn't exist
       * and write postcss.config.js there
       */

      /**
       * Check if PostCSS config already exists.
       * If it exists, throw an error.
       */
      const postCSSConfigPath = (0, _lib.getPaths)().web.postcss;

      if (!force && _fs.default.existsSync(postCSSConfigPath)) {
        throw new Error('PostCSS config already exists.\nUse --force to override existing config.');
      } else {
        return (0, _lib.writeFile)(postCSSConfigPath, _fs.default.readFileSync(_path.default.resolve(__dirname, 'templates', 'postcss.config.js.template')).toString(), {
          overwriteExisting: force
        });
      }
    }
  }, {
    title: 'Initializing Tailwind CSS...',
    task: async () => {
      const webConfigPath = (0, _lib.getPaths)().web.config;

      const tailwindConfigPath = _path.default.join(webConfigPath, 'tailwind.config.js');

      if (_fs.default.existsSync(tailwindConfigPath)) {
        if (force) {
          // `yarn tailwindcss init` will fail these files already exists
          _fs.default.unlinkSync(tailwindConfigPath);
        } else {
          throw new Error('Tailwindcss config already exists.\nUse --force to override existing config.');
        }
      }

      await (0, _execa.default)('yarn', ['tailwindcss', 'init', tailwindConfigPath, '--jit']); // add purge and lint

      const tailwindConfig = _fs.default.readFileSync(tailwindConfigPath, 'utf-8');

      const newTailwindConfig = tailwindConfig.replace('purge: []', "purge: ['src/**/*.{js,jsx,ts,tsx}']");

      _fs.default.writeFileSync(tailwindConfigPath, newTailwindConfig);

      await (0, _execa.default)('yarn', ['eslint', '--fix', tailwindConfigPath]);
    }
  }, {
    title: 'Adding import to index.css...',
    task: (_ctx, task) => {
      const INDEX_CSS_PATH = _path.default.join((0, _lib.getPaths)().web.src, 'index.css');

      const indexCSS = _fs.default.readFileSync(INDEX_CSS_PATH, 'utf-8');

      if (tailwindImportsExist(indexCSS)) {
        task.skip('Imports already exist in index.css');
      } else {
        const newIndexCSS = tailwindImportsAndNotes.join('\n') + indexCSS;

        _fs.default.writeFileSync(INDEX_CSS_PATH, newIndexCSS);
      }
    }
  }, {
    title: 'One more thing...',
    task: (_ctx, task) => {
      task.title = `One more thing...\n
          ${_colors.default.green('Tailwind configured with "Just-in-Time" mode')}\n
          ${_chalk.default.hex('#e8e8e8')('See this doc for info: https://tailwindcss.com/docs/just-in-time-mode')}
        `;
    }
  }]);

  try {
    await tasks.run();
  } catch (e) {
    console.error(_colors.default.error(e.message));
    process.exit((e === null || e === void 0 ? void 0 : e.exitCode) || 1);
  }
};

exports.handler = handler;