"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.getTasks = exports.builder = exports.description = exports.aliases = exports.command = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));

var _repeat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/repeat"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _listr = _interopRequireDefault(require("listr"));

var _listrVerboseRenderer = _interopRequireDefault(require("listr-verbose-renderer"));

var _internal = require("@redwoodjs/internal");

var _prerender = require("@redwoodjs/prerender");

var _colors = _interopRequireDefault(require("../lib/colors"));

const command = 'prerender';
exports.command = command;
const aliases = ['render'];
exports.aliases = aliases;
const description = 'Prerender pages of a redwood app (experimental)';
exports.description = description;

const builder = yargs => {
  yargs.showHelpOnFail(false);
  yargs.option('path', {
    alias: 'path',
    default: false,
    description: 'Router path to prerender',
    type: 'string'
  });
  yargs.option('output', {
    alias: 'output',
    default: false,
    description: 'Output path',
    type: 'string'
  });
  yargs.option('dry-run', {
    alias: 'd',
    default: false,
    description: 'Run prerender and output to console',
    type: 'boolean'
  });
  yargs.option('verbose', {
    alias: 'v',
    default: false,
    description: 'Print more',
    type: 'boolean'
  });
};

exports.builder = builder;

const mapRouterPathToHtml = routerPath => {
  if (routerPath === '/') {
    return 'web/dist/index.html';
  } else {
    return `web/dist${routerPath}.html`;
  }
}; // This can be used directly in build.js for nested ListrTasks


const getTasks = dryrun => {
  var _context;

  const prerenderRoutes = (0, _prerender.detectPrerenderRoutes)();

  if (prerenderRoutes.length === 0) {
    console.error('\nSkipping prerender...');
    console.error(_colors.default.warning('You have not marked any routes as `prerender` in `Routes.{js,tsx}` \n')); // Don't error out

    return [];
  }

  if (!_fs.default.existsSync(_path.default.join((0, _internal.getPaths)().web.dist), 'index.html')) {
    console.error('You must run `yarn rw build web` before trying to prerender.');
    process.exit(1); // TODO: Run this automatically at this point.
  }

  const listrTasks = (0, _map.default)(_context = (0, _filter.default)(prerenderRoutes).call(prerenderRoutes, route => route.path)).call(_context, routeToPrerender => {
    const outputHtmlPath = mapRouterPathToHtml(routeToPrerender.path);
    return {
      title: `Prerendering ${routeToPrerender.path} -> ${outputHtmlPath}`,
      task: () => {
        return (0, _prerender.runPrerender)({
          routerPath: routeToPrerender.path,
          outputHtmlPath,
          dryRun: dryrun
        });
      }
    };
  });
  return listrTasks;
};

exports.getTasks = getTasks;

const diagnosticCheck = () => {
  const checks = [{
    message: 'Duplicate React version found in web/node_modules',
    failure: _fs.default.existsSync(_path.default.join((0, _internal.getPaths)().web.base, 'node_modules/react'))
  }, {
    message: 'Duplicate react-dom version found in web/node_modules',
    failure: _fs.default.existsSync(_path.default.join((0, _internal.getPaths)().web.base, 'node_modules/react-dom'))
  }, {
    message: 'Duplicate core-js version found in web/node_modules',
    failure: _fs.default.existsSync(_path.default.join((0, _internal.getPaths)().web.base, 'node_modules/core-js'))
  }, {
    message: 'Duplicate @redwoodjs/web version found in web/node_modules',
    failure: _fs.default.existsSync(_path.default.join((0, _internal.getPaths)().web.base, 'node_modules/@redwoodjs/web'))
  }];
  console.log('Running diagnostic checks');

  if ((0, _some.default)(checks).call(checks, checks => checks.failure)) {
    var _context2, _context3, _context4;

    console.error(_colors.default.error('node_modules are being duplicated in `./web` \n'));
    console.log('⚠️  Issues found: ');
    console.log((0, _repeat.default)(_context2 = '-').call(_context2, 50));
    (0, _forEach.default)(_context3 = (0, _filter.default)(checks).call(checks, check => check.failure)).call(_context3, (check, i) => {
      console.log(`${i + 1}. ${check.message}`);
    });
    console.log((0, _repeat.default)(_context4 = '-').call(_context4, 50));
    console.log('Diagnostic check found issues. See the Redwood Forum link below for help:');
    console.log(_colors.default.underline('https://community.redwoodjs.com/search?q=duplicate%20package%20found'));
    console.log(); // Exit, no need to show other messages

    process.exit(1);
  } else {
    console.log('✔ Diagnostics checks passed \n');
  }
};

const handler = async ({
  path: routerPath,
  output,
  dryRun,
  verbose
}) => {
  if (routerPath) {
    await (0, _prerender.runPrerender)({
      routerPath,
      outputHtmlPath: output,
      dryRun
    });
    return;
  }

  const listrTasks = getTasks(dryRun);
  const tasks = new _listr.default(listrTasks, {
    renderer: verbose ? _listrVerboseRenderer.default : 'default',
    concurrent: true
  });

  try {
    await tasks.run();
  } catch (e) {
    console.log();
    await diagnosticCheck();
    console.log(_colors.default.warning('Not all routes were succesfully prerendered. Run `yarn rw prerender --dry-run` for detailed logs'));
    console.log(_colors.default.info(`We could not prerender all your pages, but your Redwood app should still work fine.`));
    console.log(_colors.default.info(`This could mean that a library you're using does not support SSR.`));
    console.log();
    process.exit(1);
  }
};

exports.handler = handler;