"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.watchFunctions = exports.importFreshFunctions = void 0;

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));

var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));

var _path = _interopRequireDefault(require("path"));

var _register = _interopRequireDefault(require("@babel/register"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _requireDir = _interopRequireDefault(require("require-dir"));

// TODO: This file "watches" side for changes, but it's out of scope the "dev-server"
// package.
// Ideally a user will be able to deploy the "dev-server"/ "redwood-http-server" on
// their own infrastructure, in which case the ability to live-reload changes doesn't
// make sense.
const WATCHER_IGNORE_EXTENSIONS = ['.db', '.sqlite', '-journal'];

/**
 * Purge the require cache and import them again.
 */
const importFreshFunctions = functionsPath => {
  var _context;

  (0, _forEach.default)(_context = (0, _keys.default)(require.cache)).call(_context, key => {
    delete require.cache[key];
  });
  return (0, _requireDir.default)(functionsPath, {
    recurse: false,
    extensions: ['.js', '.ts']
  });
};

exports.importFreshFunctions = importFreshFunctions;

const watchFunctions = ({
  paths,
  onChange,
  onImport,
  onException
}) => {
  // Use babel-register to add a require hook:
  // > The require hook will bind itself to node's require and automatically
  // > compile files on the fly.
  //
  // This will use the `.babelrc.js` configuration file in the base directory
  // of the project, usually `./api/.babelrc.js`
  (0, _register.default)({
    extends: _path.default.join(paths.base, '.babelrc.js'),
    extensions: ['.js', '.ts'],
    only: [paths.base],
    ignore: ['node_modules'],
    cache: false
  });

  try {
    const functions = importFreshFunctions(paths.functions);
    onImport(functions);
  } catch (e) {
    onException(e);
  }

  const watcher = _chokidar.default.watch(paths.base, {
    ignored: file => (0, _includes.default)(file).call(file, 'node_modules') || (0, _some.default)(WATCHER_IGNORE_EXTENSIONS).call(WATCHER_IGNORE_EXTENSIONS, ext => (0, _endsWith.default)(file).call(file, ext))
  });

  watcher.on('ready', () => {
    watcher.on('all', (event, path) => {
      onChange(event, path);

      try {
        const functions = importFreshFunctions(paths.functions);
        onImport(functions);
      } catch (e) {
        console.log();
        onException(e);
      }
    });
  });
};

exports.watchFunctions = watchFunctions;